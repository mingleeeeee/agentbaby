{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "pendingOwner()",
          "transferOwnership(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)128_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Ownable2StepStorage)13_storage": {
              "label": "struct Ownable2StepUpgradeable.Ownable2StepStorage",
              "members": [
                {
                  "label": "_pendingOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)68_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable2Step": [
              {
                "contract": "Ownable2StepUpgradeable",
                "label": "_pendingOwner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:29",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)128_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)68_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)128_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)128_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor": {
        "src": "@openzeppelin/contracts/governance/IGovernor.sol:15",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "version()",
          "COUNTING_MODE()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalThreshold()",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "proposalProposer(uint256)",
          "proposalEta(uint256)",
          "proposalNeedsQueuing(uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "getVotesWithParams(address,uint256,bytes)",
          "hasVoted(uint256,address)",
          "propose(address[],uint256[],bytes[],string)",
          "queue(address[],uint256[],bytes[],bytes32)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "cancel(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteWithReasonAndParams(uint256,uint8,string,bytes)",
          "castVoteBySig(uint256,uint8,address,bytes)",
          "castVoteWithReasonAndParamsBySig(uint256,uint8,address,string,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin/contracts/interfaces/IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372": {
        "src": "@openzeppelin/contracts/interfaces/IERC6372.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "clock()",
          "CLOCK_MODE()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "891b19fd49c455eb465854ef7e0bccc7902248a41fcf78a51ab1e9aa025cda8d",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:11",
        "version": {
          "withMetadata": "291557a0e8d15e961166d00b5785e470ad29e55c91b790bb03e2f72a1978daff",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin/contracts/utils/Errors.sol:14",
        "version": {
          "withMetadata": "2988d0e7aff52f28a8ccd989d898a5938ca7f222190d190f9df823b0e2b819dd",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:41",
        "version": {
          "withMetadata": "547f72fc054fd1a148ea2f5aadbcfa87efee5abf4f18597ce48506de879e98ec",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/AgentToken.sol:AgentToken": {
        "src": "contracts/virtualPersona/AgentToken.sol:14",
        "version": {
          "withMetadata": "e778c60aaaba8ec437236572feef05fd62173429219dc0b958917b5c8b9efb4f",
          "withoutMetadata": "bd69b9b82a1810f0fa47ac53d776caeaa78b7afad0b7f4b0a50b0d2da950d9a6",
          "linkedWithoutMetadata": "bd69b9b82a1810f0fa47ac53d776caeaa78b7afad0b7f4b0a50b0d2da950d9a6"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "contracts/virtualPersona/IAgentToken.sol:IAgentToken",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/virtualPersona/IErrors.sol:IErrors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "contracts/virtualPersona/IERC20Config.sol:IERC20Config",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize(address[2],bytes,bytes,bytes,address,string)",
          "addInitialLiquidity(address)",
          "isLiquidityPool(address)",
          "liquidityPools()",
          "addLiquidityPool(address)",
          "removeLiquidityPool(address)",
          "isValidCaller(bytes32)",
          "validCallers()",
          "addValidCaller(bytes32)",
          "removeValidCaller(bytes32)",
          "setProjectTaxRecipient(address)",
          "setSwapThresholdBasisPoints(uint16)",
          "setProjectTaxRates(uint16,uint16)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "totalBuyTaxBasisPoints()",
          "totalSellTaxBasisPoints()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "distributeTaxTokens()",
          "withdrawETH(uint256)",
          "withdrawERC20(address,uint256)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AgentToken",
            "src": "contracts/virtualPersona/AgentToken.sol:85"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "kuruCreatedMarketAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:28"
            },
            {
              "label": "kuruRouterAddress",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:30"
            },
            {
              "label": "botProtectionDurationInSeconds",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:32"
            },
            {
              "label": "_tokenHasTax",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:33"
            },
            {
              "label": "fundedDate",
              "offset": 1,
              "slot": "3",
              "type": "t_uint32",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:35"
            },
            {
              "label": "projectBuyTaxBasisPoints",
              "offset": 5,
              "slot": "3",
              "type": "t_uint16",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:36"
            },
            {
              "label": "projectSellTaxBasisPoints",
              "offset": 7,
              "slot": "3",
              "type": "t_uint16",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:37"
            },
            {
              "label": "swapThresholdBasisPoints",
              "offset": 9,
              "slot": "3",
              "type": "t_uint16",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:38"
            },
            {
              "label": "pairToken",
              "offset": 11,
              "slot": "3",
              "type": "t_address",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:39"
            },
            {
              "label": "_autoSwapInProgress",
              "offset": 31,
              "slot": "3",
              "type": "t_bool",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:45"
            },
            {
              "label": "projectTaxRecipient",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:47"
            },
            {
              "label": "projectTaxPendingSwap",
              "offset": 0,
              "slot": "5",
              "type": "t_uint128",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:48"
            },
            {
              "label": "vault",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:49"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "7",
              "type": "t_string_storage",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:51"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "8",
              "type": "t_string_storage",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:52"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:53"
            },
            {
              "label": "_baseTokenSymbol",
              "offset": 0,
              "slot": "10",
              "type": "t_string_storage",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:55"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:58"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:61"
            },
            {
              "label": "_validCallerCodeHashes",
              "offset": 0,
              "slot": "13",
              "type": "t_struct(Bytes32Set)2203_storage",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:64"
            },
            {
              "label": "_liquidityPools",
              "offset": 0,
              "slot": "15",
              "type": "t_struct(AddressSet)2324_storage",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:67"
            },
            {
              "label": "_factory",
              "offset": 0,
              "slot": "17",
              "type": "t_contract(IAgentFactory)4392",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)128_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Ownable2StepStorage)13_storage": {
              "label": "struct Ownable2StepUpgradeable.Ownable2StepStorage",
              "members": [
                {
                  "label": "_pendingOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)68_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IAgentFactory)4392": {
              "label": "contract IAgentFactory",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)2324_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2009_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Bytes32Set)2203_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2009_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)2009_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_positions",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable2Step": [
              {
                "contract": "Ownable2StepUpgradeable",
                "label": "_pendingOwner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:29",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IAgentFactory.sol:IAgentFactory": {
        "src": "contracts/virtualPersona/IAgentFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposeAgent(string,string,string,uint8[],bytes32,address,uint32,uint256)",
          "withdraw(uint256)",
          "totalAgents()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IAgentToken.sol:IAgentToken": {
        "src": "contracts/virtualPersona/IAgentToken.sol:9",
        "inherit": [
          "contracts/virtualPersona/IErrors.sol:IErrors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "contracts/virtualPersona/IERC20Config.sol:IERC20Config",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "addInitialLiquidity(address)",
          "isLiquidityPool(address)",
          "liquidityPools()",
          "addLiquidityPool(address)",
          "removeLiquidityPool(address)",
          "isValidCaller(bytes32)",
          "validCallers()",
          "addValidCaller(bytes32)",
          "removeValidCaller(bytes32)",
          "setProjectTaxRecipient(address)",
          "setSwapThresholdBasisPoints(uint16)",
          "setProjectTaxRates(uint16,uint16)",
          "totalBuyTaxBasisPoints()",
          "totalSellTaxBasisPoints()",
          "distributeTaxTokens()",
          "withdrawETH(uint256)",
          "withdrawERC20(address,uint256)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "initialize(address[2],bytes,bytes,bytes,address,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IERC20Config.sol:IERC20Config": {
        "src": "contracts/virtualPersona/IERC20Config.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IErrors.sol:IErrors": {
        "src": "contracts/virtualPersona/IErrors.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IKuru.sol:IDepositContract": {
        "src": "contracts/virtualPersona/IKuru.sol:44",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IKuru.sol:IKuruRouter": {
        "src": "contracts/virtualPersona/IKuru.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deployProxy(uint8,address,address,uint96,uint32,uint32,uint96,uint96,uint256,uint256,uint96)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IKuru.sol:IKuruVault": {
        "src": "contracts/virtualPersona/IKuru.sol:28",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVaultParams()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IKuru.sol:IOrderBook": {
        "src": "contracts/virtualPersona/IKuru.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      }
    },
    {
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin/contracts/interfaces/IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:29",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "891b19fd49c455eb465854ef7e0bccc7902248a41fcf78a51ab1e9aa025cda8d",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:11",
        "version": {
          "withMetadata": "291557a0e8d15e961166d00b5785e470ad29e55c91b790bb03e2f72a1978daff",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin/contracts/utils/Errors.sol:14",
        "version": {
          "withMetadata": "2988d0e7aff52f28a8ccd989d898a5938ca7f222190d190f9df823b0e2b819dd",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/testingKuru/TestKuru.sol:TestKuru": {
        "src": "contracts/testingKuru/TestKuru.sol:9",
        "version": {
          "withMetadata": "18f8d511485e310934239736140a40436ffa19b028b2f56e657900323b37a285",
          "withoutMetadata": "ae4d0f2dd415ace80f5a3229a2771f994432630a798670eef4ebeb8d7101fac1",
          "linkedWithoutMetadata": "ae4d0f2dd415ace80f5a3229a2771f994432630a798670eef4ebeb8d7101fac1"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "mintTokenToThisContract()",
          "createMarket()",
          "addLiquidity()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestKuru",
            "src": "contracts/testingKuru/TestKuru.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "kuruRouterAddress",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "TestKuru",
              "src": "contracts/testingKuru/TestKuru.sol:12"
            },
            {
              "label": "memeToken",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "TestKuru",
              "src": "contracts/testingKuru/TestKuru.sol:13"
            },
            {
              "label": "pairToken",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "TestKuru",
              "src": "contracts/testingKuru/TestKuru.sol:14"
            },
            {
              "label": "kuruMarketProxyAddress",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "TestKuru",
              "src": "contracts/testingKuru/TestKuru.sol:16"
            },
            {
              "label": "kuruVaultAddress",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "TestKuru",
              "src": "contracts/testingKuru/TestKuru.sol:17"
            },
            {
              "label": "lpOwner",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "TestKuru",
              "src": "contracts/testingKuru/TestKuru.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IKuru.sol:IDepositContract": {
        "src": "contracts/virtualPersona/IKuru.sol:44",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IKuru.sol:IKuruRouter": {
        "src": "contracts/virtualPersona/IKuru.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deployProxy(uint8,address,address,uint96,uint32,uint32,uint96,uint96,uint256,uint256,uint96)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IKuru.sol:IKuruVault": {
        "src": "contracts/virtualPersona/IKuru.sol:28",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVaultParams()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IKuru.sol:IOrderBook": {
        "src": "contracts/virtualPersona/IKuru.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      }
    },
    {
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin/contracts/interfaces/IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:29",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "891b19fd49c455eb465854ef7e0bccc7902248a41fcf78a51ab1e9aa025cda8d",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:11",
        "version": {
          "withMetadata": "291557a0e8d15e961166d00b5785e470ad29e55c91b790bb03e2f72a1978daff",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin/contracts/utils/Errors.sol:14",
        "version": {
          "withMetadata": "2988d0e7aff52f28a8ccd989d898a5938ca7f222190d190f9df823b0e2b819dd",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/testingKuru/TestKuru.sol:TestKuru": {
        "src": "contracts/testingKuru/TestKuru.sol:9",
        "version": {
          "withMetadata": "556533586ba73cda8574cffc24d3faa3d8a449d1ce27c059c06bec3ed8a72711",
          "withoutMetadata": "e4c38eebc0bd254e0b582206c7d6c609f63063a3a08a57001e72fd7af28d381b",
          "linkedWithoutMetadata": "e4c38eebc0bd254e0b582206c7d6c609f63063a3a08a57001e72fd7af28d381b"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "(address,address,address,address)",
          "mintTokenToThisContract()",
          "createMarket()",
          "addLiquidity()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestKuru",
            "src": "contracts/testingKuru/TestKuru.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "kuruRouterAddress",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "TestKuru",
              "src": "contracts/testingKuru/TestKuru.sol:12"
            },
            {
              "label": "memeToken",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "TestKuru",
              "src": "contracts/testingKuru/TestKuru.sol:13"
            },
            {
              "label": "pairToken",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "TestKuru",
              "src": "contracts/testingKuru/TestKuru.sol:14"
            },
            {
              "label": "kuruMarketProxyAddress",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "TestKuru",
              "src": "contracts/testingKuru/TestKuru.sol:16"
            },
            {
              "label": "kuruVaultAddress",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "TestKuru",
              "src": "contracts/testingKuru/TestKuru.sol:17"
            },
            {
              "label": "lpOwner",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "TestKuru",
              "src": "contracts/testingKuru/TestKuru.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IKuru.sol:IDepositContract": {
        "src": "contracts/virtualPersona/IKuru.sol:44",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IKuru.sol:IKuruRouter": {
        "src": "contracts/virtualPersona/IKuru.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deployProxy(uint8,address,address,uint96,uint32,uint32,uint96,uint96,uint256,uint256,uint96)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IKuru.sol:IKuruVault": {
        "src": "contracts/virtualPersona/IKuru.sol:28",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVaultParams()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IKuru.sol:IOrderBook": {
        "src": "contracts/virtualPersona/IKuru.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)24_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(AccessControlStorage)34_storage": {
              "label": "struct AccessControlUpgradeable.AccessControlStorage",
              "members": [
                {
                  "label": "_roles",
                  "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)211_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)24_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)211_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)151_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)211_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)211_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)211_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)296_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)211_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor": {
        "src": "@openzeppelin/contracts/governance/IGovernor.sol:15",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "version()",
          "COUNTING_MODE()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalThreshold()",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "proposalProposer(uint256)",
          "proposalEta(uint256)",
          "proposalNeedsQueuing(uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "getVotesWithParams(address,uint256,bytes)",
          "hasVoted(uint256,address)",
          "propose(address[],uint256[],bytes[],string)",
          "queue(address[],uint256[],bytes[],bytes32)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "cancel(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteWithReasonAndParams(uint256,uint8,string,bytes)",
          "castVoteBySig(uint256,uint8,address,bytes)",
          "castVoteWithReasonAndParamsBySig(uint256,uint8,address,string,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin/contracts/interfaces/IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372": {
        "src": "@openzeppelin/contracts/interfaces/IERC6372.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "clock()",
          "CLOCK_MODE()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "891b19fd49c455eb465854ef7e0bccc7902248a41fcf78a51ab1e9aa025cda8d",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:11",
        "version": {
          "withMetadata": "291557a0e8d15e961166d00b5785e470ad29e55c91b790bb03e2f72a1978daff",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin/contracts/utils/Errors.sol:14",
        "version": {
          "withMetadata": "2988d0e7aff52f28a8ccd989d898a5938ca7f222190d190f9df823b0e2b819dd",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/fun/Bonding.sol:Bonding": {
        "src": "contracts/fun/Bonding.sol:18",
        "version": {
          "withMetadata": "bd66b4a22f12ee69d8aafcb4c556006b310cccfad1b21fe989f25a6456641a89",
          "withoutMetadata": "0de9ad97972ac45e9baaadca386ecfb384157ecd2e65344a5b5239dd0311acf4",
          "linkedWithoutMetadata": "0de9ad97972ac45e9baaadca386ecfb384157ecd2e65344a5b5239dd0311acf4"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize(address,address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "setInitialSupply(uint256)",
          "setGradThreshold(uint256)",
          "setFee(uint256,address)",
          "setMaxTx(uint256)",
          "setAssetRate(uint256)",
          "setDeployParams((bytes32,address,uint32,uint256))",
          "getUserTokens(address)",
          "launch(string,string,uint8[],string,string,string[4],uint256)",
          "sell(uint256,address)",
          "buy(uint256,address)",
          "unwrapToken(address,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_feeTo",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:25"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(FFactory)5067",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:27"
            },
            {
              "label": "router",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FRouter)6146",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:28"
            },
            {
              "label": "initialSupply",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:29"
            },
            {
              "label": "fee",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:30"
            },
            {
              "label": "assetRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:32"
            },
            {
              "label": "gradThreshold",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:33"
            },
            {
              "label": "maxTx",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:35"
            },
            {
              "label": "agentFactory",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:35"
            },
            {
              "label": "_deployParams",
              "offset": 0,
              "slot": "9",
              "type": "t_struct(DeployParams)2814_storage",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:80"
            },
            {
              "label": "profile",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_struct(Profile)2749_storage)",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:82"
            },
            {
              "label": "profiles",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:85"
            },
            {
              "label": "tokenInfo",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_struct(Token)2780_storage)",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:85"
            },
            {
              "label": "tokenInfos",
              "offset": 0,
              "slot": "15",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:88"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)211_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)151_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)296_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint8)dyn_storage": {
              "label": "uint8[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FFactory)5067": {
              "label": "contract FFactory",
              "numberOfBytes": "20"
            },
            "t_contract(FRouter)6146": {
              "label": "contract FRouter",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(Profile)2749_storage)": {
              "label": "mapping(address => struct Bonding.Profile)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Token)2780_storage)": {
              "label": "mapping(address => struct Bonding.Token)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)2805_storage": {
              "label": "struct Bonding.Data",
              "members": [
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "ticker",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "supply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "price",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "marketCap",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "volume",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "volume24H",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "prevPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "lastUpdated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                }
              ],
              "numberOfBytes": "384"
            },
            "t_struct(DeployParams)2814_storage": {
              "label": "struct Bonding.DeployParams",
              "members": [
                {
                  "label": "tbaSalt",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tbaImplementation",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "daoVotingPeriod",
                  "type": "t_uint32",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "daoThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Profile)2749_storage": {
              "label": "struct Bonding.Profile",
              "members": [
                {
                  "label": "user",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokens",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Token)2780_storage": {
              "label": "struct Bonding.Token",
              "members": [
                {
                  "label": "creator",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pair",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "agentToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "data",
                  "type": "t_struct(Data)2805_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "description",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "cores",
                  "type": "t_array(t_uint8)dyn_storage",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "image",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "twitter",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "telegram",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "youtube",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "website",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "22"
                },
                {
                  "label": "trading",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "23"
                },
                {
                  "label": "tradingOnUniswap",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "23"
                }
              ],
              "numberOfBytes": "768"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/fun/FERC20.sol:FERC20": {
        "src": "contracts/fun/FERC20.sol:7",
        "version": {
          "withMetadata": "9d7682666968ea2cbd3ef2033e947f4f98d3061bc3f44a08d37e8d5954f3d8da",
          "withoutMetadata": "e8f110d3e8394675bf7defbec80655e0d7d19dc8de08f106ccb819d7f9e128a2",
          "linkedWithoutMetadata": "e8f110d3e8394675bf7defbec80655e0d7d19dc8de08f106ccb819d7f9e128a2"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,uint256)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "updateMaxTx(uint256)",
          "excludeFromMaxTx(address)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FERC20",
            "src": "contracts/fun/FERC20.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:10"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:12"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:14"
            },
            {
              "label": "maxTx",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:16"
            },
            {
              "label": "_maxTxAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:18"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:20"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:22"
            },
            {
              "label": "isExcludedFromMaxTx",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/fun/FFactory.sol:FFactory": {
        "src": "contracts/fun/FFactory.sol:10",
        "version": {
          "withMetadata": "5a3bb2b3cb5e2808ce7e0664cf5e476e7540ce77d71fb1ce04c4c3cfd3c417e8",
          "withoutMetadata": "f15caf2f9e5481fe8bbd4c9fce1b84556a4641a7c32a5b16fdc5ea07b6d20db1",
          "linkedWithoutMetadata": "f15caf2f9e5481fe8bbd4c9fce1b84556a4641a7c32a5b16fdc5ea07b6d20db1"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address,uint256,uint256)",
          "createPair(address,address)",
          "getPair(address,address)",
          "allPairsLength()",
          "setTaxParams(address,uint256,uint256)",
          "setRouter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_pair",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "contract": "FFactory",
              "src": "contracts/fun/FFactory.sol:18"
            },
            {
              "label": "pairs",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "FFactory",
              "src": "contracts/fun/FFactory.sol:20"
            },
            {
              "label": "router",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "FFactory",
              "src": "contracts/fun/FFactory.sol:22"
            },
            {
              "label": "taxVault",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "FFactory",
              "src": "contracts/fun/FFactory.sol:25"
            },
            {
              "label": "buyTax",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "FFactory",
              "src": "contracts/fun/FFactory.sol:26"
            },
            {
              "label": "sellTax",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "FFactory",
              "src": "contracts/fun/FFactory.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)24_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(AccessControlStorage)34_storage": {
              "label": "struct AccessControlUpgradeable.AccessControlStorage",
              "members": [
                {
                  "label": "_roles",
                  "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)211_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)296_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)24_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/fun/FPair.sol:FPair": {
        "src": "contracts/fun/FPair.sol:10",
        "version": {
          "withMetadata": "a5a21eeb28faead3542cd57fc088d9110832d505b3b9d9718c3972db29186561",
          "withoutMetadata": "4a386c08fa27375ac13c5b8e53d83a87ac00d6bec8939d018059442d968e98fa",
          "linkedWithoutMetadata": "4a386c08fa27375ac13c5b8e53d83a87ac00d6bec8939d018059442d968e98fa"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/fun/IFPair.sol:IFPair"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "mint(uint256,uint256)",
          "swap(uint256,uint256,uint256,uint256)",
          "approval(address,address,uint256)",
          "transferAsset(address,uint256)",
          "transferTo(address,uint256)",
          "getReserves()",
          "kLast()",
          "priceALast()",
          "priceBLast()",
          "balance()",
          "assetBalance()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FPair",
            "src": "contracts/fun/FPair.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            },
            {
              "label": "router",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "FPair",
              "src": "contracts/fun/FPair.sol:13"
            },
            {
              "label": "tokenA",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "FPair",
              "src": "contracts/fun/FPair.sol:14"
            },
            {
              "label": "tokenB",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "FPair",
              "src": "contracts/fun/FPair.sol:15"
            },
            {
              "label": "_pool",
              "offset": 0,
              "slot": "4",
              "type": "t_struct(Pool)5096_storage",
              "contract": "FPair",
              "src": "contracts/fun/FPair.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_struct(Pool)5096_storage": {
              "label": "struct FPair.Pool",
              "members": [
                {
                  "label": "reserve0",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "reserve1",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "k",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lastUpdated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/fun/FRouter.sol:FRouter": {
        "src": "contracts/fun/FRouter.sol:15",
        "version": {
          "withMetadata": "a9d96992db408d1eddfdb808f9d6ea88412829ed7b20b1522815f8af8b77a71a",
          "withoutMetadata": "588d30286a2698f9160ddbd5ad835c82181d72bbb107a95129551860d0de4ddc",
          "linkedWithoutMetadata": "588d30286a2698f9160ddbd5ad835c82181d72bbb107a95129551860d0de4ddc"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "getAmountsOut(address,address,uint256)",
          "addInitialLiquidity(address,uint256,uint256)",
          "sell(uint256,address,address)",
          "buy(uint256,address,address)",
          "graduate(address)",
          "approval(address,address,address,uint256)",
          "setTaxManager(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(FFactory)5067",
              "contract": "FRouter",
              "src": "contracts/fun/FRouter.sol:25"
            },
            {
              "label": "assetToken",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "FRouter",
              "src": "contracts/fun/FRouter.sol:26"
            },
            {
              "label": "taxManager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "FRouter",
              "src": "contracts/fun/FRouter.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)24_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(AccessControlStorage)34_storage": {
              "label": "struct AccessControlUpgradeable.AccessControlStorage",
              "members": [
                {
                  "label": "_roles",
                  "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)211_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)296_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)24_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_contract(FFactory)5067": {
              "label": "contract FFactory",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/fun/IFPair.sol:IFPair": {
        "src": "contracts/fun/IFPair.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getReserves()",
          "assetBalance()",
          "balance()",
          "mint(uint256,uint256)",
          "transferAsset(address,uint256)",
          "transferTo(address,uint256)",
          "swap(uint256,uint256,uint256,uint256)",
          "kLast()",
          "approval(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IAgentFactoryV3.sol:IAgentFactoryV3": {
        "src": "contracts/virtualPersona/IAgentFactoryV3.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposeAgent(string,string,string,uint8[],bytes32,address,uint32,uint256)",
          "withdraw(uint256)",
          "totalAgents()",
          "initFromBondingCurve(string,string,uint8[],bytes32,address,uint32,uint256,uint256)",
          "executeBondingCurveApplication(uint256,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)24_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(AccessControlStorage)34_storage": {
              "label": "struct AccessControlUpgradeable.AccessControlStorage",
              "members": [
                {
                  "label": "_roles",
                  "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)211_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)24_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)211_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)151_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)211_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)211_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)211_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)296_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)211_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor": {
        "src": "@openzeppelin/contracts/governance/IGovernor.sol:15",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "version()",
          "COUNTING_MODE()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalThreshold()",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "proposalProposer(uint256)",
          "proposalEta(uint256)",
          "proposalNeedsQueuing(uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "getVotesWithParams(address,uint256,bytes)",
          "hasVoted(uint256,address)",
          "propose(address[],uint256[],bytes[],string)",
          "queue(address[],uint256[],bytes[],bytes32)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "cancel(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteWithReasonAndParams(uint256,uint8,string,bytes)",
          "castVoteBySig(uint256,uint8,address,bytes)",
          "castVoteWithReasonAndParamsBySig(uint256,uint8,address,string,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin/contracts/interfaces/IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372": {
        "src": "@openzeppelin/contracts/interfaces/IERC6372.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "clock()",
          "CLOCK_MODE()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "891b19fd49c455eb465854ef7e0bccc7902248a41fcf78a51ab1e9aa025cda8d",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:11",
        "version": {
          "withMetadata": "291557a0e8d15e961166d00b5785e470ad29e55c91b790bb03e2f72a1978daff",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin/contracts/utils/Errors.sol:14",
        "version": {
          "withMetadata": "2988d0e7aff52f28a8ccd989d898a5938ca7f222190d190f9df823b0e2b819dd",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/fun/Bonding.sol:Bonding": {
        "src": "contracts/fun/Bonding.sol:18",
        "version": {
          "withMetadata": "619224ad6c130c1f69e0a88a0c6a9cea5f95f1c3089b3e292ee528dbfbe7158d",
          "withoutMetadata": "0de9ad97972ac45e9baaadca386ecfb384157ecd2e65344a5b5239dd0311acf4",
          "linkedWithoutMetadata": "0de9ad97972ac45e9baaadca386ecfb384157ecd2e65344a5b5239dd0311acf4"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize(address,address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "setInitialSupply(uint256)",
          "setGradThreshold(uint256)",
          "setFee(uint256,address)",
          "setMaxTx(uint256)",
          "setAssetRate(uint256)",
          "setDeployParams((bytes32,address,uint32,uint256))",
          "getUserTokens(address)",
          "launch(string,string,uint8[],string,string,string[4],uint256)",
          "sell(uint256,address)",
          "buy(uint256,address)",
          "unwrapToken(address,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_feeTo",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:25"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(FFactory)5067",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:27"
            },
            {
              "label": "router",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FRouter)6146",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:28"
            },
            {
              "label": "initialSupply",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:29"
            },
            {
              "label": "fee",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:30"
            },
            {
              "label": "assetRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:32"
            },
            {
              "label": "gradThreshold",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:33"
            },
            {
              "label": "maxTx",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:35"
            },
            {
              "label": "agentFactory",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:35"
            },
            {
              "label": "_deployParams",
              "offset": 0,
              "slot": "9",
              "type": "t_struct(DeployParams)2814_storage",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:80"
            },
            {
              "label": "profile",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_struct(Profile)2749_storage)",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:82"
            },
            {
              "label": "profiles",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:85"
            },
            {
              "label": "tokenInfo",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_struct(Token)2780_storage)",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:85"
            },
            {
              "label": "tokenInfos",
              "offset": 0,
              "slot": "15",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:88"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)211_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)151_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)296_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint8)dyn_storage": {
              "label": "uint8[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FFactory)5067": {
              "label": "contract FFactory",
              "numberOfBytes": "20"
            },
            "t_contract(FRouter)6146": {
              "label": "contract FRouter",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(Profile)2749_storage)": {
              "label": "mapping(address => struct Bonding.Profile)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Token)2780_storage)": {
              "label": "mapping(address => struct Bonding.Token)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)2805_storage": {
              "label": "struct Bonding.Data",
              "members": [
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "ticker",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "supply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "price",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "marketCap",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "volume",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "volume24H",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "prevPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "lastUpdated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                }
              ],
              "numberOfBytes": "384"
            },
            "t_struct(DeployParams)2814_storage": {
              "label": "struct Bonding.DeployParams",
              "members": [
                {
                  "label": "tbaSalt",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tbaImplementation",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "daoVotingPeriod",
                  "type": "t_uint32",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "daoThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Profile)2749_storage": {
              "label": "struct Bonding.Profile",
              "members": [
                {
                  "label": "user",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokens",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Token)2780_storage": {
              "label": "struct Bonding.Token",
              "members": [
                {
                  "label": "creator",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pair",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "agentToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "data",
                  "type": "t_struct(Data)2805_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "description",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "cores",
                  "type": "t_array(t_uint8)dyn_storage",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "image",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "twitter",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "telegram",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "youtube",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "website",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "22"
                },
                {
                  "label": "trading",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "23"
                },
                {
                  "label": "tradingOnUniswap",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "23"
                }
              ],
              "numberOfBytes": "768"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/fun/FERC20.sol:FERC20": {
        "src": "contracts/fun/FERC20.sol:7",
        "version": {
          "withMetadata": "9d7682666968ea2cbd3ef2033e947f4f98d3061bc3f44a08d37e8d5954f3d8da",
          "withoutMetadata": "e8f110d3e8394675bf7defbec80655e0d7d19dc8de08f106ccb819d7f9e128a2",
          "linkedWithoutMetadata": "e8f110d3e8394675bf7defbec80655e0d7d19dc8de08f106ccb819d7f9e128a2"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,uint256)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "updateMaxTx(uint256)",
          "excludeFromMaxTx(address)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FERC20",
            "src": "contracts/fun/FERC20.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:10"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:12"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:14"
            },
            {
              "label": "maxTx",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:16"
            },
            {
              "label": "_maxTxAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:18"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:20"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:22"
            },
            {
              "label": "isExcludedFromMaxTx",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/fun/FFactory.sol:FFactory": {
        "src": "contracts/fun/FFactory.sol:10",
        "version": {
          "withMetadata": "5a3bb2b3cb5e2808ce7e0664cf5e476e7540ce77d71fb1ce04c4c3cfd3c417e8",
          "withoutMetadata": "f15caf2f9e5481fe8bbd4c9fce1b84556a4641a7c32a5b16fdc5ea07b6d20db1",
          "linkedWithoutMetadata": "f15caf2f9e5481fe8bbd4c9fce1b84556a4641a7c32a5b16fdc5ea07b6d20db1"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address,uint256,uint256)",
          "createPair(address,address)",
          "getPair(address,address)",
          "allPairsLength()",
          "setTaxParams(address,uint256,uint256)",
          "setRouter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_pair",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "contract": "FFactory",
              "src": "contracts/fun/FFactory.sol:18"
            },
            {
              "label": "pairs",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "FFactory",
              "src": "contracts/fun/FFactory.sol:20"
            },
            {
              "label": "router",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "FFactory",
              "src": "contracts/fun/FFactory.sol:22"
            },
            {
              "label": "taxVault",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "FFactory",
              "src": "contracts/fun/FFactory.sol:25"
            },
            {
              "label": "buyTax",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "FFactory",
              "src": "contracts/fun/FFactory.sol:26"
            },
            {
              "label": "sellTax",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "FFactory",
              "src": "contracts/fun/FFactory.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)24_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(AccessControlStorage)34_storage": {
              "label": "struct AccessControlUpgradeable.AccessControlStorage",
              "members": [
                {
                  "label": "_roles",
                  "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)211_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)296_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)24_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/fun/FPair.sol:FPair": {
        "src": "contracts/fun/FPair.sol:10",
        "version": {
          "withMetadata": "a5a21eeb28faead3542cd57fc088d9110832d505b3b9d9718c3972db29186561",
          "withoutMetadata": "4a386c08fa27375ac13c5b8e53d83a87ac00d6bec8939d018059442d968e98fa",
          "linkedWithoutMetadata": "4a386c08fa27375ac13c5b8e53d83a87ac00d6bec8939d018059442d968e98fa"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/fun/IFPair.sol:IFPair"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "mint(uint256,uint256)",
          "swap(uint256,uint256,uint256,uint256)",
          "approval(address,address,uint256)",
          "transferAsset(address,uint256)",
          "transferTo(address,uint256)",
          "getReserves()",
          "kLast()",
          "priceALast()",
          "priceBLast()",
          "balance()",
          "assetBalance()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FPair",
            "src": "contracts/fun/FPair.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            },
            {
              "label": "router",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "FPair",
              "src": "contracts/fun/FPair.sol:13"
            },
            {
              "label": "tokenA",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "FPair",
              "src": "contracts/fun/FPair.sol:14"
            },
            {
              "label": "tokenB",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "FPair",
              "src": "contracts/fun/FPair.sol:15"
            },
            {
              "label": "_pool",
              "offset": 0,
              "slot": "4",
              "type": "t_struct(Pool)5096_storage",
              "contract": "FPair",
              "src": "contracts/fun/FPair.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_struct(Pool)5096_storage": {
              "label": "struct FPair.Pool",
              "members": [
                {
                  "label": "reserve0",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "reserve1",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "k",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lastUpdated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/fun/FRouter.sol:FRouter": {
        "src": "contracts/fun/FRouter.sol:15",
        "version": {
          "withMetadata": "a9d96992db408d1eddfdb808f9d6ea88412829ed7b20b1522815f8af8b77a71a",
          "withoutMetadata": "588d30286a2698f9160ddbd5ad835c82181d72bbb107a95129551860d0de4ddc",
          "linkedWithoutMetadata": "588d30286a2698f9160ddbd5ad835c82181d72bbb107a95129551860d0de4ddc"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "getAmountsOut(address,address,uint256)",
          "addInitialLiquidity(address,uint256,uint256)",
          "sell(uint256,address,address)",
          "buy(uint256,address,address)",
          "graduate(address)",
          "approval(address,address,address,uint256)",
          "setTaxManager(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(FFactory)5067",
              "contract": "FRouter",
              "src": "contracts/fun/FRouter.sol:25"
            },
            {
              "label": "assetToken",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "FRouter",
              "src": "contracts/fun/FRouter.sol:26"
            },
            {
              "label": "taxManager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "FRouter",
              "src": "contracts/fun/FRouter.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)24_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(AccessControlStorage)34_storage": {
              "label": "struct AccessControlUpgradeable.AccessControlStorage",
              "members": [
                {
                  "label": "_roles",
                  "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)211_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)296_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)24_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_contract(FFactory)5067": {
              "label": "contract FFactory",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/fun/IFPair.sol:IFPair": {
        "src": "contracts/fun/IFPair.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getReserves()",
          "assetBalance()",
          "balance()",
          "mint(uint256,uint256)",
          "transferAsset(address,uint256)",
          "transferTo(address,uint256)",
          "swap(uint256,uint256,uint256,uint256)",
          "kLast()",
          "approval(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IAgentFactoryV3.sol:IAgentFactoryV3": {
        "src": "contracts/virtualPersona/IAgentFactoryV3.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposeAgent(string,string,string,uint8[],bytes32,address,uint32,uint256)",
          "withdraw(uint256)",
          "totalAgents()",
          "initFromBondingCurve(string,string,uint8[],bytes32,address,uint32,uint256,uint256)",
          "executeBondingCurveApplication(uint256,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)24_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(AccessControlStorage)34_storage": {
              "label": "struct AccessControlUpgradeable.AccessControlStorage",
              "members": [
                {
                  "label": "_roles",
                  "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)24_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "pendingOwner()",
          "transferOwnership(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Ownable2StepStorage)151_storage": {
              "label": "struct Ownable2StepUpgradeable.Ownable2StepStorage",
              "members": [
                {
                  "label": "_pendingOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)206_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable2Step": [
              {
                "contract": "Ownable2StepUpgradeable",
                "label": "_pendingOwner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:29",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)206_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)347_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)542_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)606_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor": {
        "src": "@openzeppelin/contracts/governance/IGovernor.sol:15",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "version()",
          "COUNTING_MODE()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalThreshold()",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "proposalProposer(uint256)",
          "proposalEta(uint256)",
          "proposalNeedsQueuing(uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "getVotesWithParams(address,uint256,bytes)",
          "hasVoted(uint256,address)",
          "propose(address[],uint256[],bytes[],string)",
          "queue(address[],uint256[],bytes[],bytes32)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "cancel(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteWithReasonAndParams(uint256,uint8,string,bytes)",
          "castVoteBySig(uint256,uint8,address,bytes)",
          "castVoteWithReasonAndParamsBySig(uint256,uint8,address,string,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin/contracts/interfaces/IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372": {
        "src": "@openzeppelin/contracts/interfaces/IERC6372.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "clock()",
          "CLOCK_MODE()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/Clones.sol:Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:19",
        "version": {
          "withMetadata": "1e65d2975c3188e5413f54fc4427f86e2c2554e34f16ed3eab50d801620e7ced",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "84da0990bff9760927c7cfdf4a9fc9d0287106fde7bf7516714c9466d24cb9fe",
          "withoutMetadata": "f78f3b3ec0cfd3d0376afa7ebbe17cb10b6c7508163caee561240d33775a0c1d",
          "linkedWithoutMetadata": "f78f3b3ec0cfd3d0376afa7ebbe17cb10b6c7508163caee561240d33775a0c1d"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:26"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:15",
        "version": {
          "withMetadata": "fb862cee6f501fc7ba8ac83bf4262baca1caee319d382b3ef3fe6602f795345c",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "a9b689c276b7071d1af3560ca91c74e7be2efbbbb1c5767c32ec9abda70e981a",
          "withoutMetadata": "16b3e7cc394337423b8ac2b7a503a8f0aae87a83e791b520180cb6206e7251d1",
          "linkedWithoutMetadata": "16b3e7cc394337423b8ac2b7a503a8f0aae87a83e791b520180cb6206e7251d1"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProxyAdmin",
            "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:17",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:62",
        "version": {
          "withMetadata": "931f1adc326a7f35cd160d4cf48df0cfc1731421779c696930cce10d5c9eae31",
          "withoutMetadata": "931f1adc326a7f35cd160d4cf48df0cfc1731421779c696930cce10d5c9eae31",
          "linkedWithoutMetadata": "931f1adc326a7f35cd160d4cf48df0cfc1731421779c696930cce10d5c9eae31"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:79"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_admin",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:67"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:29",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "891b19fd49c455eb465854ef7e0bccc7902248a41fcf78a51ab1e9aa025cda8d",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:11",
        "version": {
          "withMetadata": "291557a0e8d15e961166d00b5785e470ad29e55c91b790bb03e2f72a1978daff",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin/contracts/utils/Errors.sol:14",
        "version": {
          "withMetadata": "2988d0e7aff52f28a8ccd989d898a5938ca7f222190d190f9df823b0e2b819dd",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "632a6d19ba358003dea6c406891600368fc8db002296dafc361a78e6c52ca9d8",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:41",
        "version": {
          "withMetadata": "547f72fc054fd1a148ea2f5aadbcfa87efee5abf4f18597ce48506de879e98ec",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol:IAuthorizerAdaptor": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol:20",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:IAuthentication"
        ],
        "libraries": [],
        "methods": [
          "getVault()",
          "getAuthorizer()",
          "performAction(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/BasePoolUserData.sol:BasePoolUserData": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/BasePoolUserData.sol:17",
        "version": {
          "withMetadata": "29673cdcd2517ae1f6e5bbd142c773a637afb69944c70951e6134ed008c12b32",
          "withoutMetadata": "97ed889be638604e98837401f4b8b5e602196e310afa87adb7b7be60386195f9",
          "linkedWithoutMetadata": "97ed889be638604e98837401f4b8b5e602196e310afa87adb7b7be60386195f9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IAssetManager.sol:IAssetManager": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IAssetManager.sol:20",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setConfig(bytes32,bytes)",
          "getToken()",
          "getAUM(bytes32)",
          "getPoolBalances(bytes32)",
          "maxInvestableBalance(bytes32)",
          "updateBalanceOfPool(bytes32)",
          "shouldRebalance(uint256,uint256)",
          "rebalance(bytes32,bool)",
          "capitalOut(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IBasePoolFactory.sol:IBasePoolFactory": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IBasePoolFactory.sol:20",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:IAuthentication"
        ],
        "libraries": [],
        "methods": [
          "isPoolFromFactory(address)",
          "isDisabled()",
          "disable()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IControlledPool.sol:IControlledPool": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IControlledPool.sol:19",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setSwapFeePercentage(uint256)",
          "setAssetManagerPoolConfig(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IRateProvider.sol:IRateProvider": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IRateProvider.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRate()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IRecoveryMode.sol:IRecoveryMode": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IRecoveryMode.sol:20",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enableRecoveryMode()",
          "disableRecoveryMode()",
          "inRecoveryMode()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-weighted/WeightedPoolUserData.sol:WeightedPoolUserData": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-weighted/WeightedPoolUserData.sol:19",
        "version": {
          "withMetadata": "0213f4d28a15b5ae71ad072e21215835b3087436a4a82e93a773e6601c01c725",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:115",
        "version": {
          "withMetadata": "c06506a613d5f65efd5f6df381cbaffea0119b67edb5f6c34c1b056e39b8cacd",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:IAuthentication": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getActionId(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol:ISignaturesValidator": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol:20",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getDomainSeparator()",
          "getNextNonce(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol:ITemporarilyPausable": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol:20",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPausedState()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol:IWETH": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol:23",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol:IERC20": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol:IERC20Permit": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol:IProtocolFeePercentagesProvider": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol:23",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerFeeType(uint256,string,uint256,uint256)",
          "isValidFeeType(uint256)",
          "isValidFeeTypePercentage(uint256,uint256)",
          "setFeeTypePercentage(uint256,uint256)",
          "getFeeTypePercentage(uint256)",
          "getFeeTypeMaximumPercentage(uint256)",
          "getFeeTypeName(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol:ProtocolFeeType": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol:105",
        "version": {
          "withMetadata": "8a72872f9b22f708830b78b51094897631c2ef7b8c0edf21b8633a22b7bf112a",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol:IAsset": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol:IAuthorizer": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "canPerform(bytes32,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol:IBasePool": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol:26",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IPoolSwapStructs.sol:IPoolSwapStructs"
        ],
        "libraries": [],
        "methods": [
          "onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes)",
          "onExitPool(bytes32,address,address,uint256[],uint256,uint256,bytes)",
          "getPoolId()",
          "getSwapFeePercentage()",
          "getScalingFactors()",
          "queryJoin(bytes32,address,address,uint256[],uint256,uint256,bytes)",
          "queryExit(bytes32,address,address,uint256[],uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol:IFlashLoanRecipient": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [
          "receiveFlashLoan(contract IERC20[],uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IMinimalSwapInfoPool.sol:IMinimalSwapInfoPool": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IMinimalSwapInfoPool.sol:31",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol:IBasePool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IPoolSwapStructs.sol:IPoolSwapStructs"
        ],
        "libraries": [],
        "methods": [
          "onSwap((uint8,address,address,uint256,bytes32,uint256,address,address,bytes),uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IPoolSwapStructs.sol:IPoolSwapStructs": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IPoolSwapStructs.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol:IProtocolFeesCollector": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol:23",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawCollectedFees(contract IERC20[],uint256[],address)",
          "setSwapFeePercentage(uint256)",
          "setFlashLoanFeePercentage(uint256)",
          "getSwapFeePercentage()",
          "getFlashLoanFeePercentage()",
          "getCollectedFeeAmounts(contract IERC20[])",
          "getAuthorizer()",
          "vault()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IVault.sol:IVault": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IVault.sol:34",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:IAuthentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol:ITemporarilyPausable",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol:ISignaturesValidator"
        ],
        "libraries": [],
        "methods": [
          "getAuthorizer()",
          "setAuthorizer(address)",
          "hasApprovedRelayer(address,address)",
          "setRelayerApproval(address,address,bool)",
          "getInternalBalance(address,contract IERC20[])",
          "manageUserBalance(struct IVault.UserBalanceOp[])",
          "registerPool(uint8)",
          "getPool(bytes32)",
          "registerTokens(bytes32,contract IERC20[],address[])",
          "deregisterTokens(bytes32,contract IERC20[])",
          "getPoolTokenInfo(bytes32,address)",
          "getPoolTokens(bytes32)",
          "joinPool(bytes32,address,address,(contract IAsset[],uint256[],bytes,bool))",
          "exitPool(bytes32,address,address payable,(contract IAsset[],uint256[],bytes,bool))",
          "swap((bytes32,uint8,address,address,uint256,bytes),(address,bool,address payable,bool),uint256,uint256)",
          "batchSwap(uint8,struct IVault.BatchSwapStep[],contract IAsset[],(address,bool,address payable,bool),int256[],uint256)",
          "queryBatchSwap(uint8,struct IVault.BatchSwapStep[],contract IAsset[],(address,bool,address payable,bool))",
          "flashLoan(address,contract IERC20[],uint256[],bytes)",
          "managePoolBalance(struct IVault.PoolBalanceOp[])",
          "getProtocolFeesCollector()",
          "setPaused(bool)",
          "WETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BalancerPoolToken.sol:BalancerPoolToken": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BalancerPoolToken.sol:35",
        "version": {
          "withMetadata": "481ce7913933d864dd9a9e0a925f4622956e46acf96dcc0bd7324e02b5e33b5b",
          "withoutMetadata": "58b54bc348dbc1d20d9771a62a9a9ef49c43b3d8268665bc8cf4e8ce5f2491c6",
          "linkedWithoutMetadata": "58b54bc348dbc1d20d9771a62a9a9ef49c43b3d8268665bc8cf4e8ce5f2491c6"
        },
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20Permit.sol:ERC20Permit",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol:EOASignaturesValidator",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol:EIP712",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol:ISignaturesValidator",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol:IERC20Permit",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:ERC20",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol:IERC20"
        ],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors"
        ],
        "methods": [
          "(string,string,address)",
          "getVault()",
          "allowance(address,address)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BalancerPoolToken",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BalancerPoolToken.sol:38"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_vault",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BalancerPoolToken.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:44"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:45"
            },
            {
              "label": "_nextNonce",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "EOASignaturesValidator",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BaseMinimalSwapInfoPool.sol:BaseMinimalSwapInfoPool": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BaseMinimalSwapInfoPool.sol:29",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePool.sol:BasePool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/RecoveryMode.sol:RecoveryMode",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol:TemporarilyPausable",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol:ITemporarilyPausable",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BalancerPoolToken.sol:BalancerPoolToken",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePoolAuthorization.sol:BasePoolAuthorization",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol:Authentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:IAuthentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IRecoveryMode.sol:IRecoveryMode",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20Permit.sol:ERC20Permit",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol:EOASignaturesValidator",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol:EIP712",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol:ISignaturesValidator",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol:IERC20Permit",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:ERC20",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol:IERC20",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IControlledPool.sol:IControlledPool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IMinimalSwapInfoPool.sol:IMinimalSwapInfoPool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol:IBasePool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IPoolSwapStructs.sol:IPoolSwapStructs"
        ],
        "libraries": [],
        "methods": [
          "onSwap((uint8,address,address,uint256,bytes32,uint256,address,address,bytes),uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:44"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:45"
            },
            {
              "label": "_nextNonce",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "EOASignaturesValidator",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol:27"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "7",
              "type": "t_bool",
              "contract": "TemporarilyPausable",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol:46"
            },
            {
              "label": "_miscData",
              "offset": 0,
              "slot": "8",
              "type": "t_bytes32",
              "contract": "BasePool",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePool.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePool.sol:BasePool": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePool.sol:55",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/RecoveryMode.sol:RecoveryMode",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol:TemporarilyPausable",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol:ITemporarilyPausable",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BalancerPoolToken.sol:BalancerPoolToken",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePoolAuthorization.sol:BasePoolAuthorization",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol:Authentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:IAuthentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IRecoveryMode.sol:IRecoveryMode",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20Permit.sol:ERC20Permit",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol:EOASignaturesValidator",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol:EIP712",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol:ISignaturesValidator",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol:IERC20Permit",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:ERC20",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol:IERC20",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IControlledPool.sol:IControlledPool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol:IBasePool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IPoolSwapStructs.sol:IPoolSwapStructs"
        ],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol:WordCodec",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol:FixedPoint",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/BasePoolUserData.sol:BasePoolUserData",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol:InputHelpers",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/math/Math.sol:Math"
        ],
        "methods": [
          "getPoolId()",
          "getSwapFeePercentage()",
          "getProtocolFeesCollector()",
          "setSwapFeePercentage(uint256)",
          "inRecoveryMode()",
          "setAssetManagerPoolConfig(address,bytes)",
          "pause()",
          "unpause()",
          "onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes)",
          "onExitPool(bytes32,address,address,uint256[],uint256,uint256,bytes)",
          "queryJoin(bytes32,address,address,uint256[],uint256,uint256,bytes)",
          "queryExit(bytes32,address,address,uint256[],uint256,uint256,bytes)",
          "getScalingFactors()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BasePool",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePool.sol:102"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_poolId",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePool.sol:95"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_protocolFeesCollector",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePool.sol:98"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:44"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:45"
            },
            {
              "label": "_nextNonce",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "EOASignaturesValidator",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol:27"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "7",
              "type": "t_bool",
              "contract": "TemporarilyPausable",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol:46"
            },
            {
              "label": "_miscData",
              "offset": 0,
              "slot": "8",
              "type": "t_bytes32",
              "contract": "BasePool",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePool.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePoolAuthorization.sol:BasePoolAuthorization": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePoolAuthorization.sol:31",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol:Authentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:IAuthentication"
        ],
        "libraries": [],
        "methods": [
          "getOwner()",
          "getAuthorizer()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BasePoolAuthorization",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePoolAuthorization.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_owner",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePoolAuthorization.sol:32"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/RecoveryMode.sol:RecoveryMode": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/RecoveryMode.sol:46",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePoolAuthorization.sol:BasePoolAuthorization",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol:Authentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:IAuthentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IRecoveryMode.sol:IRecoveryMode"
        ],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol:FixedPoint",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/BasePoolUserData.sol:BasePoolUserData",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors"
        ],
        "methods": [
          "enableRecoveryMode()",
          "disableRecoveryMode()",
          "inRecoveryMode()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol:BasePoolFactory": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol:38",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol:SingletonAuthentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol:Authentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/BaseSplitCodeFactory.sol:BaseSplitCodeFactory",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IBasePoolFactory.sol:IBasePoolFactory",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:IAuthentication"
        ],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors"
        ],
        "methods": [
          "isPoolFromFactory(address)",
          "isDisabled()",
          "disable()",
          "getProtocolFeePercentagesProvider()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BasePoolFactory",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol:51"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_protocolFeeProvider",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_isPoolFromFactory",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BasePoolFactory",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol:45"
            },
            {
              "label": "_disabled",
              "offset": 0,
              "slot": "1",
              "type": "t_bool",
              "contract": "BasePoolFactory",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/factories/FactoryWidePauseWindow.sol:FactoryWidePauseWindow": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/factories/FactoryWidePauseWindow.sol:24",
        "version": {
          "withMetadata": "c6ab76287b2f220be662958a8ac921c715feca4a058e6b8e49bb8b5db5912073",
          "withoutMetadata": "d5793c48b35d672327f8f16822f9c7550fb8fcaf1253e3c038e599e5b17b64dd",
          "linkedWithoutMetadata": "d5793c48b35d672327f8f16822f9c7550fb8fcaf1253e3c038e599e5b17b64dd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "getPauseConfiguration()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FactoryWidePauseWindow",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/factories/FactoryWidePauseWindow.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_poolsPauseWindowEndTime",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/factories/FactoryWidePauseWindow.sol:33"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/protocol-fees/InvariantGrowthProtocolSwapFees.sol:InvariantGrowthProtocolSwapFees": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/protocol-fees/InvariantGrowthProtocolSwapFees.sol:21",
        "version": {
          "withMetadata": "8ae844480c05c522619d77e87f45bc61638c13707805abc8bfb09c1ce4add7b6",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol:FixedPoint",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/protocol-fees/ProtocolFees.sol:ProtocolFees"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/protocol-fees/ProtocolFeeCache.sol:ProtocolFeeCache": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/protocol-fees/ProtocolFeeCache.sol:39",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/RecoveryMode.sol:RecoveryMode",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePoolAuthorization.sol:BasePoolAuthorization",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol:Authentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:IAuthentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IRecoveryMode.sol:IRecoveryMode"
        ],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeCast.sol:SafeCast",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol:ProtocolFeeType",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors"
        ],
        "methods": [
          "getProtocolFeePercentageCache(uint256)",
          "updateProtocolFeePercentageCache()",
          "getProtocolSwapFeeDelegation()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProtocolFeeCache",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/protocol-fees/ProtocolFeeCache.sol:69"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_protocolFeeProvider",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/protocol-fees/ProtocolFeeCache.sol:42"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_delegatedProtocolSwapFees",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/protocol-fees/ProtocolFeeCache.sol:64"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_fixedProtocolSwapFeePercentage",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/protocol-fees/ProtocolFeeCache.sol:67"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_cache",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(FeeTypeCache)10246_storage",
              "contract": "ProtocolFeeCache",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/protocol-fees/ProtocolFeeCache.sol:52"
            }
          ],
          "types": {
            "t_struct(FeeTypeCache)10246_storage": {
              "label": "struct ProtocolFeeCache.FeeTypeCache",
              "members": [
                {
                  "label": "swapFee",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "yieldFee",
                  "type": "t_uint64",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "aumFee",
                  "type": "t_uint64",
                  "offset": 16,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/protocol-fees/ProtocolFees.sol:ProtocolFees": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/protocol-fees/ProtocolFees.sol:20",
        "version": {
          "withMetadata": "0a13e8ba9fe6a91f8d03a11f31c27c132b48fce1e9cfde9b9b0f02727de2194c",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol:FixedPoint",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/math/Math.sol:Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol:Authentication": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol:28",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:IAuthentication"
        ],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors"
        ],
        "methods": [
          "getActionId(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Authentication",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol:41"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_actionIdDisambiguator",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol:29"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/BaseSplitCodeFactory.sol:BaseSplitCodeFactory": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/BaseSplitCodeFactory.sol:26",
        "inherit": [],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/CodeDeployer.sol:CodeDeployer"
        ],
        "methods": [
          "getCreationCodeContracts()",
          "getCreationCode()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseSplitCodeFactory",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/BaseSplitCodeFactory.sol:43"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_creationCodeContractA",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/BaseSplitCodeFactory.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_creationCodeSizeA",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/BaseSplitCodeFactory.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_creationCodeContractB",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/BaseSplitCodeFactory.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_creationCodeSizeB",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/BaseSplitCodeFactory.sol:38"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/CodeDeployer.sol:CodeDeployer": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/CodeDeployer.sol:23",
        "version": {
          "withMetadata": "9b1e8a2b999d8c7a3ce3631f88a6693aa88ae01526155ab3086fef504c3ae7c1",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol:EOASignaturesValidator": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol:25",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol:EIP712",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol:ISignaturesValidator"
        ],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors"
        ],
        "methods": [
          "getDomainSeparator()",
          "getNextNonce(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_nextNonce",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "EOASignaturesValidator",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol:InputHelpers": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol:20",
        "version": {
          "withMetadata": "bb510523da78ebf5dc3d73d292e5b0f388892003daa447e552f4332c84ee50f7",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol:SingletonAuthentication": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol:22",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol:Authentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:IAuthentication"
        ],
        "libraries": [],
        "methods": [
          "getVault()",
          "getAuthorizer()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SingletonAuthentication",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_vault",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol:23"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol:TemporarilyPausable": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol:36",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol:ITemporarilyPausable"
        ],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors"
        ],
        "methods": [
          "getPausedState()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TemporarilyPausable",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol:48"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_pauseWindowEndTime",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol:43"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_bufferPeriodEndTime",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "TemporarilyPausable",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol:46"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol:WordCodec": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol:36",
        "version": {
          "withMetadata": "33846495e8330479329cd42ae2c36df683349d3eb00a54a1f2a844ffdf49d82a",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/math/Math.sol:Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol:FixedPoint": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol:23",
        "version": {
          "withMetadata": "d6c005bbc348cfd0f040438b77f4cd63dd93570a9df477f9ef725114dacc014b",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/math/LogExpMath.sol:LogExpMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/math/LogExpMath.sol:LogExpMath": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/math/LogExpMath.sol:31",
        "version": {
          "withMetadata": "4b462ab726a081ea4ae720455bf8fdc2bfd0ae0dbbaedc106aebfa4ce51b0c90",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/math/Math.sol:Math": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/math/Math.sol:11",
        "version": {
          "withMetadata": "83008657978ab2672b9aca8d3f539d1cea8cca73d7f69c8b8a3acfb652077bc7",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol:EIP712": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol:44"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol:27"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol:28"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:ERC20": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:34",
        "version": {
          "withMetadata": "dbcc5278c3b5d8221a1ae217dbf5a8f7b916bc038d59afffae7c8ff056ddf3bc",
          "withoutMetadata": "23ed6f8e38af4440c613f98b6c06e6fde7fd352e9461e9b7ba2789d0ee638882",
          "linkedWithoutMetadata": "23ed6f8e38af4440c613f98b6c06e6fde7fd352e9461e9b7ba2789d0ee638882"
        },
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol:IERC20"
        ],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeMath.sol:SafeMath",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:44"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20Permit.sol:ERC20Permit": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20Permit.sol:20",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol:EOASignaturesValidator",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol:EIP712",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol:ISignaturesValidator",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol:IERC20Permit",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:ERC20",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol:IERC20"
        ],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20Permit.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:44"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:45"
            },
            {
              "label": "_nextNonce",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "EOASignaturesValidator",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeCast.sol:SafeCast": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeCast.sol:22",
        "version": {
          "withMetadata": "e4ae812c7a0931e5aaf22377c23ac9b4cf401c603bcbdad24fc93fc57715cea2",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeMath.sol:SafeMath": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeMath.sol:20",
        "version": {
          "withMetadata": "4d0a67c2d705b294c0304f7d1f1939bcb534d73edbd3a7838b53f30edae40e77",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/contracts/BaseWeightedPool.sol:BaseWeightedPool": {
        "src": "contracts/dexPool/balancer-v2/contracts/BaseWeightedPool.sol:32",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BaseMinimalSwapInfoPool.sol:BaseMinimalSwapInfoPool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePool.sol:BasePool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/RecoveryMode.sol:RecoveryMode",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol:TemporarilyPausable",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol:ITemporarilyPausable",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BalancerPoolToken.sol:BalancerPoolToken",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePoolAuthorization.sol:BasePoolAuthorization",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol:Authentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:IAuthentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IRecoveryMode.sol:IRecoveryMode",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20Permit.sol:ERC20Permit",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol:EOASignaturesValidator",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol:EIP712",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol:ISignaturesValidator",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol:IERC20Permit",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:ERC20",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol:IERC20",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IControlledPool.sol:IControlledPool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IMinimalSwapInfoPool.sol:IMinimalSwapInfoPool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol:IBasePool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IPoolSwapStructs.sol:IPoolSwapStructs"
        ],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol:FixedPoint",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-weighted/WeightedPoolUserData.sol:WeightedPoolUserData",
          "contracts/dexPool/balancer-v2/contracts/WeightedMath.sol:WeightedMath",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol:InputHelpers",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/math/Math.sol:Math"
        ],
        "methods": [
          "getInvariant()",
          "getNormalizedWeights()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseWeightedPool",
            "src": "contracts/dexPool/balancer-v2/contracts/BaseWeightedPool.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:44"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:45"
            },
            {
              "label": "_nextNonce",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "EOASignaturesValidator",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol:27"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "7",
              "type": "t_bool",
              "contract": "TemporarilyPausable",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol:46"
            },
            {
              "label": "_miscData",
              "offset": 0,
              "slot": "8",
              "type": "t_bytes32",
              "contract": "BasePool",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePool.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/contracts/IWeightedPoolFactory.sol:IWeightedPoolFactory": {
        "src": "contracts/dexPool/balancer-v2/contracts/IWeightedPoolFactory.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "create(string,string,contract IERC20[],uint256[],contract IRateProvider[],uint256,address)",
          "getPoolVersion()",
          "version()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/contracts/ProtocolFeePercentagesProvider.sol:ProtocolFeePercentagesProvider": {
        "src": "contracts/dexPool/balancer-v2/contracts/ProtocolFeePercentagesProvider.sol:24",
        "version": {
          "withMetadata": "63b5992902e71180499fa2e2f5c3b4479c50655897a41cf291c4a13df24dc84e",
          "withoutMetadata": "63b5992902e71180499fa2e2f5c3b4479c50655897a41cf291c4a13df24dc84e",
          "linkedWithoutMetadata": "63b5992902e71180499fa2e2f5c3b4479c50655897a41cf291c4a13df24dc84e"
        },
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol:SingletonAuthentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol:Authentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:IAuthentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol:IProtocolFeePercentagesProvider"
        ],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeCast.sol:SafeCast",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol:ProtocolFeeType"
        ],
        "methods": [
          "(address,uint256,uint256)",
          "registerFeeType(uint256,string,uint256,uint256)",
          "isValidFeeType(uint256)",
          "isValidFeeTypePercentage(uint256,uint256)",
          "setFeeTypePercentage(uint256,uint256)",
          "getFeeTypePercentage(uint256)",
          "getFeeTypeMaximumPercentage(uint256)",
          "getFeeTypeName(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProtocolFeePercentagesProvider",
            "src": "contracts/dexPool/balancer-v2/contracts/ProtocolFeePercentagesProvider.sol:50"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_protocolFeesCollector",
            "src": "contracts/dexPool/balancer-v2/contracts/ProtocolFeePercentagesProvider.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_feeTypeData",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_struct(FeeTypeData)15928_storage)",
              "contract": "ProtocolFeePercentagesProvider",
              "src": "contracts/dexPool/balancer-v2/contracts/ProtocolFeePercentagesProvider.sol:39"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint256,t_struct(FeeTypeData)15928_storage)": {
              "label": "mapping(uint256 => struct ProtocolFeePercentagesProvider.FeeTypeData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(FeeTypeData)15928_storage": {
              "label": "struct ProtocolFeePercentagesProvider.FeeTypeData",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "maximum",
                  "type": "t_uint64",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "registered",
                  "type": "t_bool",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/contracts/WeightedMath.sol:WeightedMath": {
        "src": "contracts/dexPool/balancer-v2/contracts/WeightedMath.sol:25",
        "version": {
          "withMetadata": "2eeee2fd0ff0c06db0f0b16fb86c9beacb0e922ba6497106dd0f92bca9562f8f",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol:FixedPoint",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:WeightedPool": {
        "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:24",
        "version": {
          "withMetadata": "91f9731d69efb8e51c3856c6b4fb8ec369dfd964e5d36f544e20f8ae32881861",
          "withoutMetadata": "91f9731d69efb8e51c3856c6b4fb8ec369dfd964e5d36f544e20f8ae32881861",
          "linkedWithoutMetadata": "91f9731d69efb8e51c3856c6b4fb8ec369dfd964e5d36f544e20f8ae32881861"
        },
        "inherit": [
          "contracts/dexPool/balancer-v2/contracts/WeightedPoolProtocolFees.sol:WeightedPoolProtocolFees",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/protocol-fees/ProtocolFeeCache.sol:ProtocolFeeCache",
          "contracts/dexPool/balancer-v2/contracts/BaseWeightedPool.sol:BaseWeightedPool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BaseMinimalSwapInfoPool.sol:BaseMinimalSwapInfoPool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePool.sol:BasePool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/RecoveryMode.sol:RecoveryMode",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol:TemporarilyPausable",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol:ITemporarilyPausable",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BalancerPoolToken.sol:BalancerPoolToken",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePoolAuthorization.sol:BasePoolAuthorization",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol:Authentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:IAuthentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IRecoveryMode.sol:IRecoveryMode",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20Permit.sol:ERC20Permit",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol:EOASignaturesValidator",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol:EIP712",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol:ISignaturesValidator",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol:IERC20Permit",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:ERC20",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol:IERC20",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IControlledPool.sol:IControlledPool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IMinimalSwapInfoPool.sol:IMinimalSwapInfoPool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol:IBasePool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IPoolSwapStructs.sol:IPoolSwapStructs"
        ],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol:FixedPoint",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol:InputHelpers",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors",
          "contracts/dexPool/balancer-v2/contracts/WeightedMath.sol:WeightedMath"
        ],
        "methods": [
          "((string,string,contract IERC20[],uint256[],contract IRateProvider[],address[],uint256),address,address,uint256,uint256,address,string)",
          "version()",
          "getActualSupply()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WeightedPool",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:73"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_totalTokens",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:29"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_token0",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_token1",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_token2",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_token3",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_token4",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_token5",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_token6",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:38"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_token7",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:39"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_scalingFactor0",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:45"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_scalingFactor1",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:46"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_scalingFactor2",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:47"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_scalingFactor3",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:48"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_scalingFactor4",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:49"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_scalingFactor5",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:50"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_scalingFactor6",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:51"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_scalingFactor7",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:52"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_normalizedWeight0",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:54"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_normalizedWeight1",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:55"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_normalizedWeight2",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:56"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_normalizedWeight3",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:57"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_normalizedWeight4",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:58"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_normalizedWeight5",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:59"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_normalizedWeight6",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:60"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_normalizedWeight7",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:61"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:44"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:45"
            },
            {
              "label": "_nextNonce",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "EOASignaturesValidator",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol:27"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "7",
              "type": "t_bool",
              "contract": "TemporarilyPausable",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol:46"
            },
            {
              "label": "_miscData",
              "offset": 0,
              "slot": "8",
              "type": "t_bytes32",
              "contract": "BasePool",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePool.sol:87"
            },
            {
              "label": "_cache",
              "offset": 0,
              "slot": "9",
              "type": "t_struct(FeeTypeCache)10246_storage",
              "contract": "ProtocolFeeCache",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/protocol-fees/ProtocolFeeCache.sol:52"
            },
            {
              "label": "_athRateProduct",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "WeightedPoolProtocolFees",
              "src": "contracts/dexPool/balancer-v2/contracts/WeightedPoolProtocolFees.sol:46"
            },
            {
              "label": "_version",
              "offset": 0,
              "slot": "11",
              "type": "t_string_storage",
              "contract": "WeightedPool",
              "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(FeeTypeCache)10246_storage": {
              "label": "struct ProtocolFeeCache.FeeTypeCache",
              "members": [
                {
                  "label": "swapFee",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "yieldFee",
                  "type": "t_uint64",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "aumFee",
                  "type": "t_uint64",
                  "offset": 16,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/contracts/WeightedPoolFactory.sol:WeightedPoolFactory": {
        "src": "contracts/dexPool/balancer-v2/contracts/WeightedPoolFactory.sol:25",
        "version": {
          "withMetadata": "7c11221c58427c6ef001a6197f132c173cfaf64ed573af99a20e779506069c9f",
          "withoutMetadata": "7c11221c58427c6ef001a6197f132c173cfaf64ed573af99a20e779506069c9f",
          "linkedWithoutMetadata": "7c11221c58427c6ef001a6197f132c173cfaf64ed573af99a20e779506069c9f"
        },
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/factories/FactoryWidePauseWindow.sol:FactoryWidePauseWindow",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol:BasePoolFactory",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol:SingletonAuthentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol:Authentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/BaseSplitCodeFactory.sol:BaseSplitCodeFactory",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IBasePoolFactory.sol:IBasePoolFactory",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:IAuthentication"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string,string)",
          "version()",
          "getPoolVersion()",
          "create(string,string,contract IERC20[],uint256[],contract IRateProvider[],uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WeightedPoolFactory",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPoolFactory.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_isPoolFromFactory",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BasePoolFactory",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol:45"
            },
            {
              "label": "_disabled",
              "offset": 0,
              "slot": "1",
              "type": "t_bool",
              "contract": "BasePoolFactory",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol:46"
            },
            {
              "label": "_factoryVersion",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "WeightedPoolFactory",
              "src": "contracts/dexPool/balancer-v2/contracts/WeightedPoolFactory.sol:26"
            },
            {
              "label": "_poolVersion",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "WeightedPoolFactory",
              "src": "contracts/dexPool/balancer-v2/contracts/WeightedPoolFactory.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/contracts/WeightedPoolProtocolFees.sol:WeightedPoolProtocolFees": {
        "src": "contracts/dexPool/balancer-v2/contracts/WeightedPoolProtocolFees.sol:24",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/protocol-fees/ProtocolFeeCache.sol:ProtocolFeeCache",
          "contracts/dexPool/balancer-v2/contracts/BaseWeightedPool.sol:BaseWeightedPool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BaseMinimalSwapInfoPool.sol:BaseMinimalSwapInfoPool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePool.sol:BasePool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/RecoveryMode.sol:RecoveryMode",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol:TemporarilyPausable",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol:ITemporarilyPausable",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BalancerPoolToken.sol:BalancerPoolToken",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePoolAuthorization.sol:BasePoolAuthorization",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol:Authentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:IAuthentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IRecoveryMode.sol:IRecoveryMode",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20Permit.sol:ERC20Permit",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol:EOASignaturesValidator",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol:EIP712",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol:ISignaturesValidator",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol:IERC20Permit",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:ERC20",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol:IERC20",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IControlledPool.sol:IControlledPool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IMinimalSwapInfoPool.sol:IMinimalSwapInfoPool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol:IBasePool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IPoolSwapStructs.sol:IPoolSwapStructs"
        ],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol:FixedPoint",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol:WordCodec",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol:InputHelpers",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/protocol-fees/InvariantGrowthProtocolSwapFees.sol:InvariantGrowthProtocolSwapFees",
          "contracts/dexPool/balancer-v2/contracts/WeightedMath.sol:WeightedMath",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol:ProtocolFeeType",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/protocol-fees/ProtocolFees.sol:ProtocolFees",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeMath.sol:SafeMath"
        ],
        "methods": [
          "getLastPostJoinExitInvariant()",
          "getATHRateProduct()",
          "getRateProviders()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WeightedPoolProtocolFees",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPoolProtocolFees.sol:59"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_rateProvider0",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPoolProtocolFees.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_rateProvider1",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPoolProtocolFees.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_rateProvider2",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPoolProtocolFees.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_rateProvider3",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPoolProtocolFees.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_rateProvider4",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPoolProtocolFees.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_rateProvider5",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPoolProtocolFees.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_rateProvider6",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPoolProtocolFees.sol:38"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_rateProvider7",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPoolProtocolFees.sol:39"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_exemptFromYieldFees",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPoolProtocolFees.sol:41"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:44"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:45"
            },
            {
              "label": "_nextNonce",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "EOASignaturesValidator",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol:27"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "7",
              "type": "t_bool",
              "contract": "TemporarilyPausable",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol:46"
            },
            {
              "label": "_miscData",
              "offset": 0,
              "slot": "8",
              "type": "t_bytes32",
              "contract": "BasePool",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePool.sol:87"
            },
            {
              "label": "_cache",
              "offset": 0,
              "slot": "9",
              "type": "t_struct(FeeTypeCache)10246_storage",
              "contract": "ProtocolFeeCache",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/protocol-fees/ProtocolFeeCache.sol:52"
            },
            {
              "label": "_athRateProduct",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "WeightedPoolProtocolFees",
              "src": "contracts/dexPool/balancer-v2/contracts/WeightedPoolProtocolFees.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(FeeTypeCache)10246_storage": {
              "label": "struct ProtocolFeeCache.FeeTypeCache",
              "members": [
                {
                  "label": "swapFee",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "yieldFee",
                  "type": "t_uint64",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "aumFee",
                  "type": "t_uint64",
                  "offset": 16,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/example/MockErc20.sol:MockErc20": {
        "src": "contracts/example/MockErc20.sol:6",
        "version": {
          "withMetadata": "32f679124353ee8ab5670e44f85d9acf26bbc9f7398e4b1b375e41604b3122ff",
          "withoutMetadata": "07d7e0dc5d35a5d647ad1ffd9854b82c36dab8f2b49235b138ad7c9f5bda77a0",
          "linkedWithoutMetadata": "07d7e0dc5d35a5d647ad1ffd9854b82c36dab8f2b49235b138ad7c9f5bda77a0"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockErc20",
            "src": "contracts/example/MockErc20.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/example/MyTokenV1.sol:MyTokenV1": {
        "src": "contracts/example/MyTokenV1.sol:11",
        "version": {
          "withMetadata": "bb4c23955016331a9f7b97537ef30e54ee27efca61223cc44b72328833b72872",
          "withoutMetadata": "e4954803e325c55f3ede2d2ee831423b5cd4454644afeda022a795974662fa77",
          "linkedWithoutMetadata": "e4954803e325c55f3ede2d2ee831423b5cd4454644afeda022a795974662fa77"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,uint256)",
          "setMyValue(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "myValue",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "MyTokenV1",
              "src": "contracts/example/MyTokenV1.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)347_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)206_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/example/MyTokenV2.sol:MyTokenV2": {
        "src": "contracts/example/MyTokenV2.sol:9",
        "version": {
          "withMetadata": "65842b1ff7093013d32df067a3e14f9057b2806e592011473b6e8c645162216e",
          "withoutMetadata": "9b0079f9296f87d248f085a8f4fc846aa2a56bc2d69793a38d9529161596a764",
          "linkedWithoutMetadata": "9b0079f9296f87d248f085a8f4fc846aa2a56bc2d69793a38d9529161596a764"
        },
        "inherit": [
          "contracts/example/MyTokenV1.sol:MyTokenV1",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "version()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "myValue",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "MyTokenV1",
              "src": "contracts/example/MyTokenV1.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)347_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)206_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/fun/Bonding.sol:Bonding": {
        "src": "contracts/fun/Bonding.sol:18",
        "version": {
          "withMetadata": "b5d615923627c11b9e25df795de127bf508dd87af02b94b11ea00ebd745682a4",
          "withoutMetadata": "a94cd086a0a0ead38ea168ce0c9ae253497adddeb69e32cbf2fc83d864b17218",
          "linkedWithoutMetadata": "a94cd086a0a0ead38ea168ce0c9ae253497adddeb69e32cbf2fc83d864b17218"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize(address,address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "setInitialSupply(uint256)",
          "setGradThreshold(uint256)",
          "setFee(uint256,address)",
          "setMaxTx(uint256)",
          "setAssetRate(uint256)",
          "setDeployParams((bytes32,address,uint32,uint256))",
          "getUserTokens(address)",
          "launch(string,string,uint8[],string,string,string[4],uint256)",
          "sell(uint256,address)",
          "buy(uint256,address)",
          "unwrapToken(address,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_feeTo",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:25"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(FFactory)22020",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:27"
            },
            {
              "label": "router",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FRouter)23099",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:28"
            },
            {
              "label": "initialSupply",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:29"
            },
            {
              "label": "fee",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:30"
            },
            {
              "label": "assetRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:32"
            },
            {
              "label": "gradThreshold",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:33"
            },
            {
              "label": "maxTx",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:35"
            },
            {
              "label": "agentFactory",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:35"
            },
            {
              "label": "_deployParams",
              "offset": 0,
              "slot": "9",
              "type": "t_struct(DeployParams)19781_storage",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:80"
            },
            {
              "label": "profile",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_struct(Profile)19716_storage)",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:82"
            },
            {
              "label": "profiles",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:85"
            },
            {
              "label": "tokenInfo",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_struct(Token)19747_storage)",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:85"
            },
            {
              "label": "tokenInfos",
              "offset": 0,
              "slot": "15",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:88"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)206_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)606_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint8)dyn_storage": {
              "label": "uint8[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FFactory)22020": {
              "label": "contract FFactory",
              "numberOfBytes": "20"
            },
            "t_contract(FRouter)23099": {
              "label": "contract FRouter",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(Profile)19716_storage)": {
              "label": "mapping(address => struct Bonding.Profile)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Token)19747_storage)": {
              "label": "mapping(address => struct Bonding.Token)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)19772_storage": {
              "label": "struct Bonding.Data",
              "members": [
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "ticker",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "supply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "price",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "marketCap",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "volume",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "volume24H",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "prevPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "lastUpdated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                }
              ],
              "numberOfBytes": "384"
            },
            "t_struct(DeployParams)19781_storage": {
              "label": "struct Bonding.DeployParams",
              "members": [
                {
                  "label": "tbaSalt",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tbaImplementation",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "daoVotingPeriod",
                  "type": "t_uint32",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "daoThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Profile)19716_storage": {
              "label": "struct Bonding.Profile",
              "members": [
                {
                  "label": "user",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokens",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Token)19747_storage": {
              "label": "struct Bonding.Token",
              "members": [
                {
                  "label": "creator",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pair",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "agentToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "data",
                  "type": "t_struct(Data)19772_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "description",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "cores",
                  "type": "t_array(t_uint8)dyn_storage",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "image",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "twitter",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "telegram",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "youtube",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "website",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "22"
                },
                {
                  "label": "trading",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "23"
                },
                {
                  "label": "tradingOnUniswap",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "23"
                }
              ],
              "numberOfBytes": "768"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/fun/FERC20.sol:FERC20": {
        "src": "contracts/fun/FERC20.sol:7",
        "version": {
          "withMetadata": "9d7682666968ea2cbd3ef2033e947f4f98d3061bc3f44a08d37e8d5954f3d8da",
          "withoutMetadata": "e8f110d3e8394675bf7defbec80655e0d7d19dc8de08f106ccb819d7f9e128a2",
          "linkedWithoutMetadata": "e8f110d3e8394675bf7defbec80655e0d7d19dc8de08f106ccb819d7f9e128a2"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,uint256)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "updateMaxTx(uint256)",
          "excludeFromMaxTx(address)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FERC20",
            "src": "contracts/fun/FERC20.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:10"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:12"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:14"
            },
            {
              "label": "maxTx",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:16"
            },
            {
              "label": "_maxTxAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:18"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:20"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:22"
            },
            {
              "label": "isExcludedFromMaxTx",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/fun/FFactory.sol:FFactory": {
        "src": "contracts/fun/FFactory.sol:10",
        "version": {
          "withMetadata": "5a3bb2b3cb5e2808ce7e0664cf5e476e7540ce77d71fb1ce04c4c3cfd3c417e8",
          "withoutMetadata": "f15caf2f9e5481fe8bbd4c9fce1b84556a4641a7c32a5b16fdc5ea07b6d20db1",
          "linkedWithoutMetadata": "f15caf2f9e5481fe8bbd4c9fce1b84556a4641a7c32a5b16fdc5ea07b6d20db1"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address,uint256,uint256)",
          "createPair(address,address)",
          "getPair(address,address)",
          "allPairsLength()",
          "setTaxParams(address,uint256,uint256)",
          "setRouter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_pair",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "contract": "FFactory",
              "src": "contracts/fun/FFactory.sol:18"
            },
            {
              "label": "pairs",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "FFactory",
              "src": "contracts/fun/FFactory.sol:20"
            },
            {
              "label": "router",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "FFactory",
              "src": "contracts/fun/FFactory.sol:22"
            },
            {
              "label": "taxVault",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "FFactory",
              "src": "contracts/fun/FFactory.sol:25"
            },
            {
              "label": "buyTax",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "FFactory",
              "src": "contracts/fun/FFactory.sol:26"
            },
            {
              "label": "sellTax",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "FFactory",
              "src": "contracts/fun/FFactory.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)24_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(AccessControlStorage)34_storage": {
              "label": "struct AccessControlUpgradeable.AccessControlStorage",
              "members": [
                {
                  "label": "_roles",
                  "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)606_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)24_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/fun/FPair.sol:FPair": {
        "src": "contracts/fun/FPair.sol:10",
        "version": {
          "withMetadata": "a5a21eeb28faead3542cd57fc088d9110832d505b3b9d9718c3972db29186561",
          "withoutMetadata": "4a386c08fa27375ac13c5b8e53d83a87ac00d6bec8939d018059442d968e98fa",
          "linkedWithoutMetadata": "4a386c08fa27375ac13c5b8e53d83a87ac00d6bec8939d018059442d968e98fa"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/fun/IFPair.sol:IFPair"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "mint(uint256,uint256)",
          "swap(uint256,uint256,uint256,uint256)",
          "approval(address,address,uint256)",
          "transferAsset(address,uint256)",
          "transferTo(address,uint256)",
          "getReserves()",
          "kLast()",
          "priceALast()",
          "priceBLast()",
          "balance()",
          "assetBalance()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FPair",
            "src": "contracts/fun/FPair.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            },
            {
              "label": "router",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "FPair",
              "src": "contracts/fun/FPair.sol:13"
            },
            {
              "label": "tokenA",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "FPair",
              "src": "contracts/fun/FPair.sol:14"
            },
            {
              "label": "tokenB",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "FPair",
              "src": "contracts/fun/FPair.sol:15"
            },
            {
              "label": "_pool",
              "offset": 0,
              "slot": "4",
              "type": "t_struct(Pool)22049_storage",
              "contract": "FPair",
              "src": "contracts/fun/FPair.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_struct(Pool)22049_storage": {
              "label": "struct FPair.Pool",
              "members": [
                {
                  "label": "reserve0",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "reserve1",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "k",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lastUpdated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/fun/FRouter.sol:FRouter": {
        "src": "contracts/fun/FRouter.sol:15",
        "version": {
          "withMetadata": "a9d96992db408d1eddfdb808f9d6ea88412829ed7b20b1522815f8af8b77a71a",
          "withoutMetadata": "588d30286a2698f9160ddbd5ad835c82181d72bbb107a95129551860d0de4ddc",
          "linkedWithoutMetadata": "588d30286a2698f9160ddbd5ad835c82181d72bbb107a95129551860d0de4ddc"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "getAmountsOut(address,address,uint256)",
          "addInitialLiquidity(address,uint256,uint256)",
          "sell(uint256,address,address)",
          "buy(uint256,address,address)",
          "graduate(address)",
          "approval(address,address,address,uint256)",
          "setTaxManager(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(FFactory)22020",
              "contract": "FRouter",
              "src": "contracts/fun/FRouter.sol:25"
            },
            {
              "label": "assetToken",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "FRouter",
              "src": "contracts/fun/FRouter.sol:26"
            },
            {
              "label": "taxManager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "FRouter",
              "src": "contracts/fun/FRouter.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)24_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(AccessControlStorage)34_storage": {
              "label": "struct AccessControlUpgradeable.AccessControlStorage",
              "members": [
                {
                  "label": "_roles",
                  "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)606_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)24_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_contract(FFactory)22020": {
              "label": "contract FFactory",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/fun/IFPair.sol:IFPair": {
        "src": "contracts/fun/IFPair.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getReserves()",
          "assetBalance()",
          "balance()",
          "mint(uint256,uint256)",
          "transferAsset(address,uint256)",
          "transferTo(address,uint256)",
          "swap(uint256,uint256,uint256,uint256)",
          "kLast()",
          "approval(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/AgentFactoryV3.sol:AgentFactoryV3": {
        "src": "contracts/virtualPersona/AgentFactoryV3.sol:17",
        "version": {
          "withMetadata": "4b03ba02725eb02fb740200edfb05e22c4d75c94d5adb720ef49965203518489",
          "withoutMetadata": "72b6080ba1f16b60af8c3f6246c3f9d5a0476ae5978e5bbba5118af0d2e8ecd1",
          "linkedWithoutMetadata": "72b6080ba1f16b60af8c3f6246c3f9d5a0476ae5978e5bbba5118af0d2e8ecd1"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/virtualPersona/IAgentFactoryV3.sol:IAgentFactoryV3"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@openzeppelin/contracts/proxy/Clones.sol:Clones"
        ],
        "methods": [
          "()",
          "initialize(address,address,uint256,uint256,address,string)",
          "getApplication(uint256)",
          "proposeAgent(string,string,string,uint8[],bytes32,address,uint32,uint256)",
          "withdraw(uint256)",
          "executeApplication(uint256,bool)",
          "totalAgents()",
          "setApplicationThreshold(uint256)",
          "setImplementations(address)",
          "setMaturityDuration(uint256)",
          "setTokenAdmin(address)",
          "setTokenSupplyParams(uint256,uint256,uint256,uint256,uint256,uint256,address)",
          "setTokenTaxParams(uint256,uint256,uint256,address)",
          "setAssetToken(address)",
          "pause()",
          "unpause()",
          "initFromBondingCurve(string,string,uint8[],bytes32,address,uint32,uint256,uint256)",
          "executeBondingCurveApplication(uint256,uint256,uint256,address)",
          "setDefaultDelegatee(address)",
          "getKuruRouterAddress()",
          "setKuruRouterAddress(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:25"
            },
            {
              "label": "tokenImplementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:26"
            },
            {
              "label": "applicationThreshold",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:27"
            },
            {
              "label": "allTokens",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:29"
            },
            {
              "label": "allDAOs",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:30"
            },
            {
              "label": "assetToken",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:32"
            },
            {
              "label": "maturityDuration",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:33"
            },
            {
              "label": "_applications",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_struct(Application)23278_storage)",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:70"
            },
            {
              "label": "gov",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:72"
            },
            {
              "label": "locked",
              "offset": 20,
              "slot": "8",
              "type": "t_bool",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:85"
            },
            {
              "label": "allTradingTokens",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:97"
            },
            {
              "label": "_tokenAdmin",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:98"
            },
            {
              "label": "defaultDelegatee",
              "offset": 0,
              "slot": "11",
              "type": "t_address",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:99"
            },
            {
              "label": "_tokenSupplyParams",
              "offset": 0,
              "slot": "12",
              "type": "t_bytes_storage",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:102"
            },
            {
              "label": "_tokenTaxParams",
              "offset": 0,
              "slot": "13",
              "type": "t_bytes_storage",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:103"
            },
            {
              "label": "_kuruRouterAddress",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:111"
            },
            {
              "label": "_baseTokenSymbol",
              "offset": 0,
              "slot": "15",
              "type": "t_string_storage",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:112"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)24_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(AccessControlStorage)34_storage": {
              "label": "struct AccessControlUpgradeable.AccessControlStorage",
              "members": [
                {
                  "label": "_roles",
                  "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)542_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)24_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint8)dyn_storage": {
              "label": "uint8[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_enum(ApplicationStatus)23249": {
              "label": "enum AgentFactoryV3.ApplicationStatus",
              "members": [
                "Active",
                "Executed",
                "Withdrawn"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint256,t_struct(Application)23278_storage)": {
              "label": "mapping(uint256 => struct AgentFactoryV3.Application)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Application)23278_storage": {
              "label": "struct AgentFactoryV3.Application",
              "members": [
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "tokenURI",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "status",
                  "type": "t_enum(ApplicationStatus)23249",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "withdrawableAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "cores",
                  "type": "t_array(t_uint8)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "proposalEndBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "virtualId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "tbaSalt",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "tbaImplementation",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "daoVotingPeriod",
                  "type": "t_uint32",
                  "offset": 20,
                  "slot": "10"
                },
                {
                  "label": "daoThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                }
              ],
              "numberOfBytes": "384"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/AgentToken.sol:AgentToken": {
        "src": "contracts/virtualPersona/AgentToken.sol:14",
        "version": {
          "withMetadata": "34f7714f9f2350d36bdd318d4ea311cfaa2a85ca80e3639894d162edfbb577d7",
          "withoutMetadata": "4e7d274550d714d9dd4f80d055b9c733fcfd992d2d551959fd643105ece604d6",
          "linkedWithoutMetadata": "4e7d274550d714d9dd4f80d055b9c733fcfd992d2d551959fd643105ece604d6"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "contracts/virtualPersona/IAgentToken.sol:IAgentToken",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/virtualPersona/IErrors.sol:IErrors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "contracts/virtualPersona/IERC20Config.sol:IERC20Config",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize(address[2],bytes,bytes,bytes,address,string)",
          "addInitialLiquidity(address)",
          "isLiquidityPool(address)",
          "liquidityPools()",
          "addLiquidityPool(address)",
          "removeLiquidityPool(address)",
          "isValidCaller(bytes32)",
          "validCallers()",
          "addValidCaller(bytes32)",
          "removeValidCaller(bytes32)",
          "setProjectTaxRecipient(address)",
          "setSwapThresholdBasisPoints(uint16)",
          "setProjectTaxRates(uint16,uint16)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "totalBuyTaxBasisPoints()",
          "totalSellTaxBasisPoints()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "distributeTaxTokens()",
          "withdrawETH(uint256)",
          "withdrawERC20(address,uint256)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AgentToken",
            "src": "contracts/virtualPersona/AgentToken.sol:85"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "kuruCreatedMarketAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:28"
            },
            {
              "label": "kuruRouterAddress",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:30"
            },
            {
              "label": "botProtectionDurationInSeconds",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:32"
            },
            {
              "label": "_tokenHasTax",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:33"
            },
            {
              "label": "fundedDate",
              "offset": 1,
              "slot": "3",
              "type": "t_uint32",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:35"
            },
            {
              "label": "projectBuyTaxBasisPoints",
              "offset": 5,
              "slot": "3",
              "type": "t_uint16",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:36"
            },
            {
              "label": "projectSellTaxBasisPoints",
              "offset": 7,
              "slot": "3",
              "type": "t_uint16",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:37"
            },
            {
              "label": "swapThresholdBasisPoints",
              "offset": 9,
              "slot": "3",
              "type": "t_uint16",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:38"
            },
            {
              "label": "pairToken",
              "offset": 11,
              "slot": "3",
              "type": "t_address",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:39"
            },
            {
              "label": "_autoSwapInProgress",
              "offset": 31,
              "slot": "3",
              "type": "t_bool",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:45"
            },
            {
              "label": "projectTaxRecipient",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:47"
            },
            {
              "label": "projectTaxPendingSwap",
              "offset": 0,
              "slot": "5",
              "type": "t_uint128",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:48"
            },
            {
              "label": "vault",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:49"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "7",
              "type": "t_string_storage",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:51"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "8",
              "type": "t_string_storage",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:52"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:53"
            },
            {
              "label": "_baseTokenSymbol",
              "offset": 0,
              "slot": "10",
              "type": "t_string_storage",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:55"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:58"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:61"
            },
            {
              "label": "_validCallerCodeHashes",
              "offset": 0,
              "slot": "13",
              "type": "t_struct(Bytes32Set)5380_storage",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:64"
            },
            {
              "label": "_liquidityPools",
              "offset": 0,
              "slot": "15",
              "type": "t_struct(AddressSet)5501_storage",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:67"
            },
            {
              "label": "_factory",
              "offset": 0,
              "slot": "17",
              "type": "t_contract(IAgentFactory)25964",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Ownable2StepStorage)151_storage": {
              "label": "struct Ownable2StepUpgradeable.Ownable2StepStorage",
              "members": [
                {
                  "label": "_pendingOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)206_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IAgentFactory)25964": {
              "label": "contract IAgentFactory",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)5501_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)5186_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Bytes32Set)5380_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)5186_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)5186_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_positions",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable2Step": [
              {
                "contract": "Ownable2StepUpgradeable",
                "label": "_pendingOwner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:29",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IAgentFactory.sol:IAgentFactory": {
        "src": "contracts/virtualPersona/IAgentFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposeAgent(string,string,string,uint8[],bytes32,address,uint32,uint256)",
          "withdraw(uint256)",
          "totalAgents()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IAgentFactoryV3.sol:IAgentFactoryV3": {
        "src": "contracts/virtualPersona/IAgentFactoryV3.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposeAgent(string,string,string,uint8[],bytes32,address,uint32,uint256)",
          "withdraw(uint256)",
          "totalAgents()",
          "initFromBondingCurve(string,string,uint8[],bytes32,address,uint32,uint256,uint256)",
          "executeBondingCurveApplication(uint256,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IAgentToken.sol:IAgentToken": {
        "src": "contracts/virtualPersona/IAgentToken.sol:9",
        "inherit": [
          "contracts/virtualPersona/IErrors.sol:IErrors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "contracts/virtualPersona/IERC20Config.sol:IERC20Config",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "addInitialLiquidity(address)",
          "isLiquidityPool(address)",
          "liquidityPools()",
          "addLiquidityPool(address)",
          "removeLiquidityPool(address)",
          "isValidCaller(bytes32)",
          "validCallers()",
          "addValidCaller(bytes32)",
          "removeValidCaller(bytes32)",
          "setProjectTaxRecipient(address)",
          "setSwapThresholdBasisPoints(uint16)",
          "setProjectTaxRates(uint16,uint16)",
          "totalBuyTaxBasisPoints()",
          "totalSellTaxBasisPoints()",
          "distributeTaxTokens()",
          "withdrawETH(uint256)",
          "withdrawERC20(address,uint256)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "initialize(address[2],bytes,bytes,bytes,address,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IERC20Config.sol:IERC20Config": {
        "src": "contracts/virtualPersona/IERC20Config.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IErrors.sol:IErrors": {
        "src": "contracts/virtualPersona/IErrors.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IKuru.sol:IDepositContract": {
        "src": "contracts/virtualPersona/IKuru.sol:44",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IKuru.sol:IKuruRouter": {
        "src": "contracts/virtualPersona/IKuru.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deployProxy(uint8,address,address,uint96,uint32,uint32,uint96,uint96,uint256,uint256,uint96)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IKuru.sol:IKuruVault": {
        "src": "contracts/virtualPersona/IKuru.sol:28",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVaultParams()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IKuru.sol:IOrderBook": {
        "src": "contracts/virtualPersona/IKuru.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)24_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(AccessControlStorage)34_storage": {
              "label": "struct AccessControlUpgradeable.AccessControlStorage",
              "members": [
                {
                  "label": "_roles",
                  "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)24_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "pendingOwner()",
          "transferOwnership(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Ownable2StepStorage)151_storage": {
              "label": "struct Ownable2StepUpgradeable.Ownable2StepStorage",
              "members": [
                {
                  "label": "_pendingOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)206_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable2Step": [
              {
                "contract": "Ownable2StepUpgradeable",
                "label": "_pendingOwner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:29",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)206_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)349_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor": {
        "src": "@openzeppelin/contracts/governance/IGovernor.sol:15",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "version()",
          "COUNTING_MODE()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalThreshold()",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "proposalProposer(uint256)",
          "proposalEta(uint256)",
          "proposalNeedsQueuing(uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "getVotesWithParams(address,uint256,bytes)",
          "hasVoted(uint256,address)",
          "propose(address[],uint256[],bytes[],string)",
          "queue(address[],uint256[],bytes[],bytes32)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "cancel(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteWithReasonAndParams(uint256,uint8,string,bytes)",
          "castVoteBySig(uint256,uint8,address,bytes)",
          "castVoteWithReasonAndParamsBySig(uint256,uint8,address,string,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin/contracts/interfaces/IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372": {
        "src": "@openzeppelin/contracts/interfaces/IERC6372.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "clock()",
          "CLOCK_MODE()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/Clones.sol:Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:19",
        "version": {
          "withMetadata": "4ffa2e2321bbd3aa498c130019bbcfd7b497ec1c9cc8dc9a3e1c7cc22849df48",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "4e1b40705e7eafb73a57bce36940364ea16e722dec4144fcf459a9ebea6e3d49",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:11",
        "version": {
          "withMetadata": "5f355666a6a48a3798ab8491921b605e73e0abab9051bbb43e86abbd84007744",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin/contracts/utils/Errors.sol:14",
        "version": {
          "withMetadata": "341feb50d5bc64ae6d632385b395839cd8cc716ce09f2dbc802ba800b851f6c0",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:41",
        "version": {
          "withMetadata": "841cb6be47fe5cbdf586eff9140266e9329d1d20c65b8382e4bf03fe14de7cc3",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/AgentFactoryV3.sol:AgentFactoryV3": {
        "src": "contracts/virtualPersona/AgentFactoryV3.sol:17",
        "version": {
          "withMetadata": "99d030289c2a96d1ba70a6fe95bb19e29538b5665c8a3ae5be7b6cb324126ca5",
          "withoutMetadata": "6f55633189058f3261645efb4b7fc11984200e0c473d8912b8a4f0676fe0c8a7",
          "linkedWithoutMetadata": "6f55633189058f3261645efb4b7fc11984200e0c473d8912b8a4f0676fe0c8a7"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/virtualPersona/IAgentFactoryV3.sol:IAgentFactoryV3"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@openzeppelin/contracts/proxy/Clones.sol:Clones"
        ],
        "methods": [
          "()",
          "initialize(address,address,uint256,uint256,address,string)",
          "getApplication(uint256)",
          "proposeAgent(string,string,string,uint8[],bytes32,address,uint32,uint256)",
          "withdraw(uint256)",
          "executeApplication(uint256,bool)",
          "totalAgents()",
          "setApplicationThreshold(uint256)",
          "setImplementations(address)",
          "setMaturityDuration(uint256)",
          "setTokenAdmin(address)",
          "setTokenSupplyParams(uint256,uint256,uint256,uint256,uint256,uint256,address)",
          "setTokenTaxParams(uint256,uint256,uint256,address)",
          "setAssetToken(address)",
          "pause()",
          "unpause()",
          "initFromBondingCurve(string,string,uint8[],bytes32,address,uint32,uint256,uint256)",
          "executeBondingCurveApplication(uint256,uint256,uint256,address)",
          "setDefaultDelegatee(address)",
          "getKuruRouterAddress()",
          "setKuruRouterAddress(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:25"
            },
            {
              "label": "tokenImplementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:26"
            },
            {
              "label": "applicationThreshold",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:27"
            },
            {
              "label": "allTokens",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:29"
            },
            {
              "label": "allDAOs",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:30"
            },
            {
              "label": "assetToken",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:32"
            },
            {
              "label": "maturityDuration",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:33"
            },
            {
              "label": "_applications",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_struct(Application)3537_storage)",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:70"
            },
            {
              "label": "gov",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:72"
            },
            {
              "label": "locked",
              "offset": 20,
              "slot": "8",
              "type": "t_bool",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:85"
            },
            {
              "label": "allTradingTokens",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:97"
            },
            {
              "label": "_tokenAdmin",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:98"
            },
            {
              "label": "defaultDelegatee",
              "offset": 0,
              "slot": "11",
              "type": "t_address",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:99"
            },
            {
              "label": "_tokenSupplyParams",
              "offset": 0,
              "slot": "12",
              "type": "t_bytes_storage",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:102"
            },
            {
              "label": "_tokenTaxParams",
              "offset": 0,
              "slot": "13",
              "type": "t_bytes_storage",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:103"
            },
            {
              "label": "_kuruRouterAddress",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:111"
            },
            {
              "label": "_baseTokenSymbol",
              "offset": 0,
              "slot": "15",
              "type": "t_string_storage",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:112"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)24_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(AccessControlStorage)34_storage": {
              "label": "struct AccessControlUpgradeable.AccessControlStorage",
              "members": [
                {
                  "label": "_roles",
                  "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)349_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)24_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint8)dyn_storage": {
              "label": "uint8[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_enum(ApplicationStatus)3508": {
              "label": "enum AgentFactoryV3.ApplicationStatus",
              "members": [
                "Active",
                "Executed",
                "Withdrawn"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint256,t_struct(Application)3537_storage)": {
              "label": "mapping(uint256 => struct AgentFactoryV3.Application)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Application)3537_storage": {
              "label": "struct AgentFactoryV3.Application",
              "members": [
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "tokenURI",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "status",
                  "type": "t_enum(ApplicationStatus)3508",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "withdrawableAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "cores",
                  "type": "t_array(t_uint8)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "proposalEndBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "virtualId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "tbaSalt",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "tbaImplementation",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "daoVotingPeriod",
                  "type": "t_uint32",
                  "offset": 20,
                  "slot": "10"
                },
                {
                  "label": "daoThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                }
              ],
              "numberOfBytes": "384"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/AgentToken.sol:AgentToken": {
        "src": "contracts/virtualPersona/AgentToken.sol:14",
        "version": {
          "withMetadata": "304650588f4b24ccf1ca767b984231e73d7d863a42e7c5708bba64948e02113e",
          "withoutMetadata": "2594249a04052e287f59373916292b24b0ad805b8bc9af3ff43a3fb7f8c96004",
          "linkedWithoutMetadata": "2594249a04052e287f59373916292b24b0ad805b8bc9af3ff43a3fb7f8c96004"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "contracts/virtualPersona/IAgentToken.sol:IAgentToken",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/virtualPersona/IErrors.sol:IErrors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "contracts/virtualPersona/IERC20Config.sol:IERC20Config",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize(address[2],bytes,bytes,bytes,address,string)",
          "addInitialLiquidity(address)",
          "isLiquidityPool(address)",
          "liquidityPools()",
          "addLiquidityPool(address)",
          "removeLiquidityPool(address)",
          "isValidCaller(bytes32)",
          "validCallers()",
          "addValidCaller(bytes32)",
          "removeValidCaller(bytes32)",
          "setProjectTaxRecipient(address)",
          "setSwapThresholdBasisPoints(uint16)",
          "setProjectTaxRates(uint16,uint16)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "totalBuyTaxBasisPoints()",
          "totalSellTaxBasisPoints()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "distributeTaxTokens()",
          "withdrawETH(uint256)",
          "withdrawERC20(address,uint256)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AgentToken",
            "src": "contracts/virtualPersona/AgentToken.sol:85"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "kuruCreatedMarketAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:28"
            },
            {
              "label": "kuruRouterAddress",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:30"
            },
            {
              "label": "botProtectionDurationInSeconds",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:32"
            },
            {
              "label": "_tokenHasTax",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:33"
            },
            {
              "label": "fundedDate",
              "offset": 1,
              "slot": "3",
              "type": "t_uint32",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:35"
            },
            {
              "label": "projectBuyTaxBasisPoints",
              "offset": 5,
              "slot": "3",
              "type": "t_uint16",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:36"
            },
            {
              "label": "projectSellTaxBasisPoints",
              "offset": 7,
              "slot": "3",
              "type": "t_uint16",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:37"
            },
            {
              "label": "swapThresholdBasisPoints",
              "offset": 9,
              "slot": "3",
              "type": "t_uint16",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:38"
            },
            {
              "label": "pairToken",
              "offset": 11,
              "slot": "3",
              "type": "t_address",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:39"
            },
            {
              "label": "_autoSwapInProgress",
              "offset": 31,
              "slot": "3",
              "type": "t_bool",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:45"
            },
            {
              "label": "projectTaxRecipient",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:47"
            },
            {
              "label": "projectTaxPendingSwap",
              "offset": 0,
              "slot": "5",
              "type": "t_uint128",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:48"
            },
            {
              "label": "vault",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:49"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "7",
              "type": "t_string_storage",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:51"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "8",
              "type": "t_string_storage",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:52"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:53"
            },
            {
              "label": "_baseTokenSymbol",
              "offset": 0,
              "slot": "10",
              "type": "t_string_storage",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:55"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:58"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:61"
            },
            {
              "label": "_validCallerCodeHashes",
              "offset": 0,
              "slot": "13",
              "type": "t_struct(Bytes32Set)3028_storage",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:64"
            },
            {
              "label": "_liquidityPools",
              "offset": 0,
              "slot": "15",
              "type": "t_struct(AddressSet)3149_storage",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:67"
            },
            {
              "label": "_factory",
              "offset": 0,
              "slot": "17",
              "type": "t_contract(IAgentFactory)6223",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Ownable2StepStorage)151_storage": {
              "label": "struct Ownable2StepUpgradeable.Ownable2StepStorage",
              "members": [
                {
                  "label": "_pendingOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)206_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IAgentFactory)6223": {
              "label": "contract IAgentFactory",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)3149_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2834_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Bytes32Set)3028_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2834_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)2834_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_positions",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable2Step": [
              {
                "contract": "Ownable2StepUpgradeable",
                "label": "_pendingOwner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:29",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IAgentFactory.sol:IAgentFactory": {
        "src": "contracts/virtualPersona/IAgentFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposeAgent(string,string,string,uint8[],bytes32,address,uint32,uint256)",
          "withdraw(uint256)",
          "totalAgents()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IAgentFactoryV3.sol:IAgentFactoryV3": {
        "src": "contracts/virtualPersona/IAgentFactoryV3.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposeAgent(string,string,string,uint8[],bytes32,address,uint32,uint256)",
          "withdraw(uint256)",
          "totalAgents()",
          "initFromBondingCurve(string,string,uint8[],bytes32,address,uint32,uint256,uint256)",
          "executeBondingCurveApplication(uint256,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IAgentToken.sol:IAgentToken": {
        "src": "contracts/virtualPersona/IAgentToken.sol:9",
        "inherit": [
          "contracts/virtualPersona/IErrors.sol:IErrors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "contracts/virtualPersona/IERC20Config.sol:IERC20Config",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "addInitialLiquidity(address)",
          "isLiquidityPool(address)",
          "liquidityPools()",
          "addLiquidityPool(address)",
          "removeLiquidityPool(address)",
          "isValidCaller(bytes32)",
          "validCallers()",
          "addValidCaller(bytes32)",
          "removeValidCaller(bytes32)",
          "setProjectTaxRecipient(address)",
          "setSwapThresholdBasisPoints(uint16)",
          "setProjectTaxRates(uint16,uint16)",
          "totalBuyTaxBasisPoints()",
          "totalSellTaxBasisPoints()",
          "distributeTaxTokens()",
          "withdrawETH(uint256)",
          "withdrawERC20(address,uint256)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "initialize(address[2],bytes,bytes,bytes,address,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IERC20Config.sol:IERC20Config": {
        "src": "contracts/virtualPersona/IERC20Config.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IErrors.sol:IErrors": {
        "src": "contracts/virtualPersona/IErrors.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IKuru.sol:IDepositContract": {
        "src": "contracts/virtualPersona/IKuru.sol:44",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IKuru.sol:IKuruRouter": {
        "src": "contracts/virtualPersona/IKuru.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deployProxy(uint8,address,address,uint96,uint32,uint32,uint96,uint96,uint256,uint256,uint96)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IKuru.sol:IKuruVault": {
        "src": "contracts/virtualPersona/IKuru.sol:28",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVaultParams()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IKuru.sol:IOrderBook": {
        "src": "contracts/virtualPersona/IKuru.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)24_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(AccessControlStorage)34_storage": {
              "label": "struct AccessControlUpgradeable.AccessControlStorage",
              "members": [
                {
                  "label": "_roles",
                  "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)24_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "pendingOwner()",
          "transferOwnership(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Ownable2StepStorage)151_storage": {
              "label": "struct Ownable2StepUpgradeable.Ownable2StepStorage",
              "members": [
                {
                  "label": "_pendingOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)206_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable2Step": [
              {
                "contract": "Ownable2StepUpgradeable",
                "label": "_pendingOwner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:29",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)206_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)349_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor": {
        "src": "@openzeppelin/contracts/governance/IGovernor.sol:15",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "version()",
          "COUNTING_MODE()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalThreshold()",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "proposalProposer(uint256)",
          "proposalEta(uint256)",
          "proposalNeedsQueuing(uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "getVotesWithParams(address,uint256,bytes)",
          "hasVoted(uint256,address)",
          "propose(address[],uint256[],bytes[],string)",
          "queue(address[],uint256[],bytes[],bytes32)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "cancel(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteWithReasonAndParams(uint256,uint8,string,bytes)",
          "castVoteBySig(uint256,uint8,address,bytes)",
          "castVoteWithReasonAndParamsBySig(uint256,uint8,address,string,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin/contracts/interfaces/IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372": {
        "src": "@openzeppelin/contracts/interfaces/IERC6372.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "clock()",
          "CLOCK_MODE()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/Clones.sol:Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:19",
        "version": {
          "withMetadata": "4ffa2e2321bbd3aa498c130019bbcfd7b497ec1c9cc8dc9a3e1c7cc22849df48",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "4e1b40705e7eafb73a57bce36940364ea16e722dec4144fcf459a9ebea6e3d49",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:11",
        "version": {
          "withMetadata": "5f355666a6a48a3798ab8491921b605e73e0abab9051bbb43e86abbd84007744",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin/contracts/utils/Errors.sol:14",
        "version": {
          "withMetadata": "341feb50d5bc64ae6d632385b395839cd8cc716ce09f2dbc802ba800b851f6c0",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:41",
        "version": {
          "withMetadata": "841cb6be47fe5cbdf586eff9140266e9329d1d20c65b8382e4bf03fe14de7cc3",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/AgentFactoryV3.sol:AgentFactoryV3": {
        "src": "contracts/virtualPersona/AgentFactoryV3.sol:17",
        "version": {
          "withMetadata": "bf37fe33ea4504691ee4113f6730ed6980eedde755e5050efe90656f1b723f44",
          "withoutMetadata": "6f55633189058f3261645efb4b7fc11984200e0c473d8912b8a4f0676fe0c8a7",
          "linkedWithoutMetadata": "6f55633189058f3261645efb4b7fc11984200e0c473d8912b8a4f0676fe0c8a7"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/virtualPersona/IAgentFactoryV3.sol:IAgentFactoryV3"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@openzeppelin/contracts/proxy/Clones.sol:Clones"
        ],
        "methods": [
          "()",
          "initialize(address,address,uint256,uint256,address,string)",
          "getApplication(uint256)",
          "proposeAgent(string,string,string,uint8[],bytes32,address,uint32,uint256)",
          "withdraw(uint256)",
          "executeApplication(uint256,bool)",
          "totalAgents()",
          "setApplicationThreshold(uint256)",
          "setImplementations(address)",
          "setMaturityDuration(uint256)",
          "setTokenAdmin(address)",
          "setTokenSupplyParams(uint256,uint256,uint256,uint256,uint256,uint256,address)",
          "setTokenTaxParams(uint256,uint256,uint256,address)",
          "setAssetToken(address)",
          "pause()",
          "unpause()",
          "initFromBondingCurve(string,string,uint8[],bytes32,address,uint32,uint256,uint256)",
          "executeBondingCurveApplication(uint256,uint256,uint256,address)",
          "setDefaultDelegatee(address)",
          "getKuruRouterAddress()",
          "setKuruRouterAddress(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:25"
            },
            {
              "label": "tokenImplementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:26"
            },
            {
              "label": "applicationThreshold",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:27"
            },
            {
              "label": "allTokens",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:29"
            },
            {
              "label": "allDAOs",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:30"
            },
            {
              "label": "assetToken",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:32"
            },
            {
              "label": "maturityDuration",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:33"
            },
            {
              "label": "_applications",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_struct(Application)3537_storage)",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:70"
            },
            {
              "label": "gov",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:72"
            },
            {
              "label": "locked",
              "offset": 20,
              "slot": "8",
              "type": "t_bool",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:85"
            },
            {
              "label": "allTradingTokens",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:97"
            },
            {
              "label": "_tokenAdmin",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:98"
            },
            {
              "label": "defaultDelegatee",
              "offset": 0,
              "slot": "11",
              "type": "t_address",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:99"
            },
            {
              "label": "_tokenSupplyParams",
              "offset": 0,
              "slot": "12",
              "type": "t_bytes_storage",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:102"
            },
            {
              "label": "_tokenTaxParams",
              "offset": 0,
              "slot": "13",
              "type": "t_bytes_storage",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:103"
            },
            {
              "label": "_kuruRouterAddress",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:111"
            },
            {
              "label": "_baseTokenSymbol",
              "offset": 0,
              "slot": "15",
              "type": "t_string_storage",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:112"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)24_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(AccessControlStorage)34_storage": {
              "label": "struct AccessControlUpgradeable.AccessControlStorage",
              "members": [
                {
                  "label": "_roles",
                  "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)349_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)24_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint8)dyn_storage": {
              "label": "uint8[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_enum(ApplicationStatus)3508": {
              "label": "enum AgentFactoryV3.ApplicationStatus",
              "members": [
                "Active",
                "Executed",
                "Withdrawn"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint256,t_struct(Application)3537_storage)": {
              "label": "mapping(uint256 => struct AgentFactoryV3.Application)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Application)3537_storage": {
              "label": "struct AgentFactoryV3.Application",
              "members": [
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "tokenURI",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "status",
                  "type": "t_enum(ApplicationStatus)3508",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "withdrawableAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "cores",
                  "type": "t_array(t_uint8)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "proposalEndBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "virtualId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "tbaSalt",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "tbaImplementation",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "daoVotingPeriod",
                  "type": "t_uint32",
                  "offset": 20,
                  "slot": "10"
                },
                {
                  "label": "daoThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                }
              ],
              "numberOfBytes": "384"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/AgentToken.sol:AgentToken": {
        "src": "contracts/virtualPersona/AgentToken.sol:14",
        "version": {
          "withMetadata": "0bf47c6695efe858bf92928cd0e1648848730b7f3031b8402f042ecdfce83208",
          "withoutMetadata": "2594249a04052e287f59373916292b24b0ad805b8bc9af3ff43a3fb7f8c96004",
          "linkedWithoutMetadata": "2594249a04052e287f59373916292b24b0ad805b8bc9af3ff43a3fb7f8c96004"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "contracts/virtualPersona/IAgentToken.sol:IAgentToken",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/virtualPersona/IErrors.sol:IErrors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "contracts/virtualPersona/IERC20Config.sol:IERC20Config",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize(address[2],bytes,bytes,bytes,address,string)",
          "addInitialLiquidity(address)",
          "isLiquidityPool(address)",
          "liquidityPools()",
          "addLiquidityPool(address)",
          "removeLiquidityPool(address)",
          "isValidCaller(bytes32)",
          "validCallers()",
          "addValidCaller(bytes32)",
          "removeValidCaller(bytes32)",
          "setProjectTaxRecipient(address)",
          "setSwapThresholdBasisPoints(uint16)",
          "setProjectTaxRates(uint16,uint16)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "totalBuyTaxBasisPoints()",
          "totalSellTaxBasisPoints()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "distributeTaxTokens()",
          "withdrawETH(uint256)",
          "withdrawERC20(address,uint256)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AgentToken",
            "src": "contracts/virtualPersona/AgentToken.sol:85"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "kuruCreatedMarketAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:28"
            },
            {
              "label": "kuruRouterAddress",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:30"
            },
            {
              "label": "botProtectionDurationInSeconds",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:32"
            },
            {
              "label": "_tokenHasTax",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:33"
            },
            {
              "label": "fundedDate",
              "offset": 1,
              "slot": "3",
              "type": "t_uint32",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:35"
            },
            {
              "label": "projectBuyTaxBasisPoints",
              "offset": 5,
              "slot": "3",
              "type": "t_uint16",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:36"
            },
            {
              "label": "projectSellTaxBasisPoints",
              "offset": 7,
              "slot": "3",
              "type": "t_uint16",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:37"
            },
            {
              "label": "swapThresholdBasisPoints",
              "offset": 9,
              "slot": "3",
              "type": "t_uint16",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:38"
            },
            {
              "label": "pairToken",
              "offset": 11,
              "slot": "3",
              "type": "t_address",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:39"
            },
            {
              "label": "_autoSwapInProgress",
              "offset": 31,
              "slot": "3",
              "type": "t_bool",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:45"
            },
            {
              "label": "projectTaxRecipient",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:47"
            },
            {
              "label": "projectTaxPendingSwap",
              "offset": 0,
              "slot": "5",
              "type": "t_uint128",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:48"
            },
            {
              "label": "vault",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:49"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "7",
              "type": "t_string_storage",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:51"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "8",
              "type": "t_string_storage",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:52"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:53"
            },
            {
              "label": "_baseTokenSymbol",
              "offset": 0,
              "slot": "10",
              "type": "t_string_storage",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:55"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:58"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:61"
            },
            {
              "label": "_validCallerCodeHashes",
              "offset": 0,
              "slot": "13",
              "type": "t_struct(Bytes32Set)3028_storage",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:64"
            },
            {
              "label": "_liquidityPools",
              "offset": 0,
              "slot": "15",
              "type": "t_struct(AddressSet)3149_storage",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:67"
            },
            {
              "label": "_factory",
              "offset": 0,
              "slot": "17",
              "type": "t_contract(IAgentFactory)6223",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Ownable2StepStorage)151_storage": {
              "label": "struct Ownable2StepUpgradeable.Ownable2StepStorage",
              "members": [
                {
                  "label": "_pendingOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)206_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IAgentFactory)6223": {
              "label": "contract IAgentFactory",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)3149_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2834_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Bytes32Set)3028_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2834_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)2834_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_positions",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable2Step": [
              {
                "contract": "Ownable2StepUpgradeable",
                "label": "_pendingOwner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:29",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IAgentFactory.sol:IAgentFactory": {
        "src": "contracts/virtualPersona/IAgentFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposeAgent(string,string,string,uint8[],bytes32,address,uint32,uint256)",
          "withdraw(uint256)",
          "totalAgents()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IAgentFactoryV3.sol:IAgentFactoryV3": {
        "src": "contracts/virtualPersona/IAgentFactoryV3.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposeAgent(string,string,string,uint8[],bytes32,address,uint32,uint256)",
          "withdraw(uint256)",
          "totalAgents()",
          "initFromBondingCurve(string,string,uint8[],bytes32,address,uint32,uint256,uint256)",
          "executeBondingCurveApplication(uint256,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IAgentToken.sol:IAgentToken": {
        "src": "contracts/virtualPersona/IAgentToken.sol:9",
        "inherit": [
          "contracts/virtualPersona/IErrors.sol:IErrors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "contracts/virtualPersona/IERC20Config.sol:IERC20Config",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "addInitialLiquidity(address)",
          "isLiquidityPool(address)",
          "liquidityPools()",
          "addLiquidityPool(address)",
          "removeLiquidityPool(address)",
          "isValidCaller(bytes32)",
          "validCallers()",
          "addValidCaller(bytes32)",
          "removeValidCaller(bytes32)",
          "setProjectTaxRecipient(address)",
          "setSwapThresholdBasisPoints(uint16)",
          "setProjectTaxRates(uint16,uint16)",
          "totalBuyTaxBasisPoints()",
          "totalSellTaxBasisPoints()",
          "distributeTaxTokens()",
          "withdrawETH(uint256)",
          "withdrawERC20(address,uint256)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "initialize(address[2],bytes,bytes,bytes,address,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IERC20Config.sol:IERC20Config": {
        "src": "contracts/virtualPersona/IERC20Config.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IErrors.sol:IErrors": {
        "src": "contracts/virtualPersona/IErrors.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IKuru.sol:IDepositContract": {
        "src": "contracts/virtualPersona/IKuru.sol:44",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IKuru.sol:IKuruRouter": {
        "src": "contracts/virtualPersona/IKuru.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deployProxy(uint8,address,address,uint96,uint32,uint32,uint96,uint96,uint256,uint256,uint96)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IKuru.sol:IKuruVault": {
        "src": "contracts/virtualPersona/IKuru.sol:28",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVaultParams()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IKuru.sol:IOrderBook": {
        "src": "contracts/virtualPersona/IKuru.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)24_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(AccessControlStorage)34_storage": {
              "label": "struct AccessControlUpgradeable.AccessControlStorage",
              "members": [
                {
                  "label": "_roles",
                  "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)24_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "pendingOwner()",
          "transferOwnership(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Ownable2StepStorage)151_storage": {
              "label": "struct Ownable2StepUpgradeable.Ownable2StepStorage",
              "members": [
                {
                  "label": "_pendingOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)206_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable2Step": [
              {
                "contract": "Ownable2StepUpgradeable",
                "label": "_pendingOwner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:29",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)206_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)349_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)413_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor": {
        "src": "@openzeppelin/contracts/governance/IGovernor.sol:15",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "version()",
          "COUNTING_MODE()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalThreshold()",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "proposalProposer(uint256)",
          "proposalEta(uint256)",
          "proposalNeedsQueuing(uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "getVotesWithParams(address,uint256,bytes)",
          "hasVoted(uint256,address)",
          "propose(address[],uint256[],bytes[],string)",
          "queue(address[],uint256[],bytes[],bytes32)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "cancel(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteWithReasonAndParams(uint256,uint8,string,bytes)",
          "castVoteBySig(uint256,uint8,address,bytes)",
          "castVoteWithReasonAndParamsBySig(uint256,uint8,address,string,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin/contracts/interfaces/IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372": {
        "src": "@openzeppelin/contracts/interfaces/IERC6372.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "clock()",
          "CLOCK_MODE()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/Clones.sol:Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:19",
        "version": {
          "withMetadata": "4ffa2e2321bbd3aa498c130019bbcfd7b497ec1c9cc8dc9a3e1c7cc22849df48",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "4e1b40705e7eafb73a57bce36940364ea16e722dec4144fcf459a9ebea6e3d49",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:11",
        "version": {
          "withMetadata": "5f355666a6a48a3798ab8491921b605e73e0abab9051bbb43e86abbd84007744",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin/contracts/utils/Errors.sol:14",
        "version": {
          "withMetadata": "341feb50d5bc64ae6d632385b395839cd8cc716ce09f2dbc802ba800b851f6c0",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:41",
        "version": {
          "withMetadata": "841cb6be47fe5cbdf586eff9140266e9329d1d20c65b8382e4bf03fe14de7cc3",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IRateProvider.sol:IRateProvider": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IRateProvider.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRate()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:IAuthentication": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getActionId(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol:ISignaturesValidator": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol:20",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getDomainSeparator()",
          "getNextNonce(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol:ITemporarilyPausable": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol:20",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPausedState()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol:IWETH": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol:23",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol:IERC20": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol:IAsset": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol:IAuthorizer": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "canPerform(bytes32,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol:IBasePool": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol:26",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IPoolSwapStructs.sol:IPoolSwapStructs"
        ],
        "libraries": [],
        "methods": [
          "onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes)",
          "onExitPool(bytes32,address,address,uint256[],uint256,uint256,bytes)",
          "getPoolId()",
          "getSwapFeePercentage()",
          "getScalingFactors()",
          "queryJoin(bytes32,address,address,uint256[],uint256,uint256,bytes)",
          "queryExit(bytes32,address,address,uint256[],uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol:IFlashLoanRecipient": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [
          "receiveFlashLoan(contract IERC20[],uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IPoolSwapStructs.sol:IPoolSwapStructs": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IPoolSwapStructs.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol:IProtocolFeesCollector": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol:23",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawCollectedFees(contract IERC20[],uint256[],address)",
          "setSwapFeePercentage(uint256)",
          "setFlashLoanFeePercentage(uint256)",
          "getSwapFeePercentage()",
          "getFlashLoanFeePercentage()",
          "getCollectedFeeAmounts(contract IERC20[])",
          "getAuthorizer()",
          "vault()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IVault.sol:IVault": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IVault.sol:34",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:IAuthentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol:ITemporarilyPausable",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol:ISignaturesValidator"
        ],
        "libraries": [],
        "methods": [
          "getAuthorizer()",
          "setAuthorizer(address)",
          "hasApprovedRelayer(address,address)",
          "setRelayerApproval(address,address,bool)",
          "getInternalBalance(address,contract IERC20[])",
          "manageUserBalance(struct IVault.UserBalanceOp[])",
          "registerPool(uint8)",
          "getPool(bytes32)",
          "registerTokens(bytes32,contract IERC20[],address[])",
          "deregisterTokens(bytes32,contract IERC20[])",
          "getPoolTokenInfo(bytes32,address)",
          "getPoolTokens(bytes32)",
          "joinPool(bytes32,address,address,(contract IAsset[],uint256[],bytes,bool))",
          "exitPool(bytes32,address,address payable,(contract IAsset[],uint256[],bytes,bool))",
          "swap((bytes32,uint8,address,address,uint256,bytes),(address,bool,address payable,bool),uint256,uint256)",
          "batchSwap(uint8,struct IVault.BatchSwapStep[],contract IAsset[],(address,bool,address payable,bool),int256[],uint256)",
          "queryBatchSwap(uint8,struct IVault.BatchSwapStep[],contract IAsset[],(address,bool,address payable,bool))",
          "flashLoan(address,contract IERC20[],uint256[],bytes)",
          "managePoolBalance(struct IVault.PoolBalanceOp[])",
          "getProtocolFeesCollector()",
          "setPaused(bool)",
          "WETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/contracts/IWeightedPoolFactory.sol:IWeightedPoolFactory": {
        "src": "contracts/dexPool/balancer-v2/contracts/IWeightedPoolFactory.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "create(string,string,contract IERC20[],uint256[],contract IRateProvider[],uint256,address)",
          "getPoolVersion()",
          "version()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/fun/Bonding.sol:Bonding": {
        "src": "contracts/fun/Bonding.sol:18",
        "version": {
          "withMetadata": "e8d1ba67dc274bfe86d2f0b6a589e8d7ecb101be695060e40ccd69562ea9cb89",
          "withoutMetadata": "45d0bdeccc279fcbc831f6d0d210b824616352d4f4b92ebab09496be21520979",
          "linkedWithoutMetadata": "45d0bdeccc279fcbc831f6d0d210b824616352d4f4b92ebab09496be21520979"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize(address,address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "setInitialSupply(uint256)",
          "setGradThreshold(uint256)",
          "setFee(uint256,address)",
          "setMaxTx(uint256)",
          "setAssetRate(uint256)",
          "setDeployParams((bytes32,address,uint32,uint256))",
          "getUserTokens(address)",
          "launch(string,string,uint8[],string,string,string[4],uint256)",
          "sell(uint256,address)",
          "buy(uint256,address)",
          "unwrapToken(address,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_feeTo",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:25"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(FFactory)7137",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:27"
            },
            {
              "label": "router",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FRouter)8216",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:28"
            },
            {
              "label": "initialSupply",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:29"
            },
            {
              "label": "fee",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:30"
            },
            {
              "label": "assetRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:32"
            },
            {
              "label": "gradThreshold",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:33"
            },
            {
              "label": "maxTx",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:35"
            },
            {
              "label": "agentFactory",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:35"
            },
            {
              "label": "_deployParams",
              "offset": 0,
              "slot": "9",
              "type": "t_struct(DeployParams)4898_storage",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:80"
            },
            {
              "label": "profile",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_struct(Profile)4833_storage)",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:82"
            },
            {
              "label": "profiles",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:85"
            },
            {
              "label": "tokenInfo",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_struct(Token)4864_storage)",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:85"
            },
            {
              "label": "tokenInfos",
              "offset": 0,
              "slot": "15",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:88"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)206_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)413_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint8)dyn_storage": {
              "label": "uint8[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FFactory)7137": {
              "label": "contract FFactory",
              "numberOfBytes": "20"
            },
            "t_contract(FRouter)8216": {
              "label": "contract FRouter",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(Profile)4833_storage)": {
              "label": "mapping(address => struct Bonding.Profile)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Token)4864_storage)": {
              "label": "mapping(address => struct Bonding.Token)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4889_storage": {
              "label": "struct Bonding.Data",
              "members": [
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "ticker",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "supply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "price",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "marketCap",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "volume",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "volume24H",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "prevPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "lastUpdated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                }
              ],
              "numberOfBytes": "384"
            },
            "t_struct(DeployParams)4898_storage": {
              "label": "struct Bonding.DeployParams",
              "members": [
                {
                  "label": "tbaSalt",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tbaImplementation",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "daoVotingPeriod",
                  "type": "t_uint32",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "daoThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Profile)4833_storage": {
              "label": "struct Bonding.Profile",
              "members": [
                {
                  "label": "user",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokens",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Token)4864_storage": {
              "label": "struct Bonding.Token",
              "members": [
                {
                  "label": "creator",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pair",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "agentToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "data",
                  "type": "t_struct(Data)4889_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "description",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "cores",
                  "type": "t_array(t_uint8)dyn_storage",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "image",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "twitter",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "telegram",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "youtube",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "website",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "22"
                },
                {
                  "label": "trading",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "23"
                },
                {
                  "label": "tradingOnUniswap",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "23"
                }
              ],
              "numberOfBytes": "768"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/fun/FERC20.sol:FERC20": {
        "src": "contracts/fun/FERC20.sol:7",
        "version": {
          "withMetadata": "b97429cb080ce48cc352cbaded18378287b31c9db43db04a22db02f68de3b018",
          "withoutMetadata": "3fde2a5f4920f297195f9a7fc12f8380241496eecfd4634a19e31564d2bc7d7a",
          "linkedWithoutMetadata": "3fde2a5f4920f297195f9a7fc12f8380241496eecfd4634a19e31564d2bc7d7a"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,uint256)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "updateMaxTx(uint256)",
          "excludeFromMaxTx(address)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FERC20",
            "src": "contracts/fun/FERC20.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:10"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:12"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:14"
            },
            {
              "label": "maxTx",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:16"
            },
            {
              "label": "_maxTxAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:18"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:20"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:22"
            },
            {
              "label": "isExcludedFromMaxTx",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/fun/FFactory.sol:FFactory": {
        "src": "contracts/fun/FFactory.sol:10",
        "version": {
          "withMetadata": "582b8ef84a91564811dc1117c370ad0e8dcc466f39fee8dcdafbb9a83416e8f0",
          "withoutMetadata": "baf8a5e919202a8b40252a587310d8b3c9e8445f94442a2d1883e1b68307f1c6",
          "linkedWithoutMetadata": "baf8a5e919202a8b40252a587310d8b3c9e8445f94442a2d1883e1b68307f1c6"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address,uint256,uint256)",
          "createPair(address,address)",
          "getPair(address,address)",
          "allPairsLength()",
          "setTaxParams(address,uint256,uint256)",
          "setRouter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_pair",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "contract": "FFactory",
              "src": "contracts/fun/FFactory.sol:18"
            },
            {
              "label": "pairs",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "FFactory",
              "src": "contracts/fun/FFactory.sol:20"
            },
            {
              "label": "router",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "FFactory",
              "src": "contracts/fun/FFactory.sol:22"
            },
            {
              "label": "taxVault",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "FFactory",
              "src": "contracts/fun/FFactory.sol:25"
            },
            {
              "label": "buyTax",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "FFactory",
              "src": "contracts/fun/FFactory.sol:26"
            },
            {
              "label": "sellTax",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "FFactory",
              "src": "contracts/fun/FFactory.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)24_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(AccessControlStorage)34_storage": {
              "label": "struct AccessControlUpgradeable.AccessControlStorage",
              "members": [
                {
                  "label": "_roles",
                  "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)413_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)24_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/fun/FPair.sol:FPair": {
        "src": "contracts/fun/FPair.sol:10",
        "version": {
          "withMetadata": "3ad5f6ccc53939645fcb7d462c4f446f27c910b2e6496359bf308adde9138e24",
          "withoutMetadata": "bfca534cea53fff70b9782a302b7f573f52bf042c30f423c5a428a71195829de",
          "linkedWithoutMetadata": "bfca534cea53fff70b9782a302b7f573f52bf042c30f423c5a428a71195829de"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/fun/IFPair.sol:IFPair"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "mint(uint256,uint256)",
          "swap(uint256,uint256,uint256,uint256)",
          "approval(address,address,uint256)",
          "transferAsset(address,uint256)",
          "transferTo(address,uint256)",
          "getReserves()",
          "kLast()",
          "priceALast()",
          "priceBLast()",
          "balance()",
          "assetBalance()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FPair",
            "src": "contracts/fun/FPair.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            },
            {
              "label": "router",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "FPair",
              "src": "contracts/fun/FPair.sol:13"
            },
            {
              "label": "tokenA",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "FPair",
              "src": "contracts/fun/FPair.sol:14"
            },
            {
              "label": "tokenB",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "FPair",
              "src": "contracts/fun/FPair.sol:15"
            },
            {
              "label": "_pool",
              "offset": 0,
              "slot": "4",
              "type": "t_struct(Pool)7166_storage",
              "contract": "FPair",
              "src": "contracts/fun/FPair.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_struct(Pool)7166_storage": {
              "label": "struct FPair.Pool",
              "members": [
                {
                  "label": "reserve0",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "reserve1",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "k",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lastUpdated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/fun/FRouter.sol:FRouter": {
        "src": "contracts/fun/FRouter.sol:15",
        "version": {
          "withMetadata": "23d9d9e2955fae5ce9eabe79acf0b665078a0d7cea58b0482ac40cce6b8b91aa",
          "withoutMetadata": "34287aed886c841bb5c04f2691056280be369bb0f9249402fe8472ca9f5beb4c",
          "linkedWithoutMetadata": "34287aed886c841bb5c04f2691056280be369bb0f9249402fe8472ca9f5beb4c"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "getAmountsOut(address,address,uint256)",
          "addInitialLiquidity(address,uint256,uint256)",
          "sell(uint256,address,address)",
          "buy(uint256,address,address)",
          "graduate(address)",
          "approval(address,address,address,uint256)",
          "setTaxManager(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(FFactory)7137",
              "contract": "FRouter",
              "src": "contracts/fun/FRouter.sol:25"
            },
            {
              "label": "assetToken",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "FRouter",
              "src": "contracts/fun/FRouter.sol:26"
            },
            {
              "label": "taxManager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "FRouter",
              "src": "contracts/fun/FRouter.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)24_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(AccessControlStorage)34_storage": {
              "label": "struct AccessControlUpgradeable.AccessControlStorage",
              "members": [
                {
                  "label": "_roles",
                  "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)413_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)24_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_contract(FFactory)7137": {
              "label": "contract FFactory",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/fun/IFPair.sol:IFPair": {
        "src": "contracts/fun/IFPair.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getReserves()",
          "assetBalance()",
          "balance()",
          "mint(uint256,uint256)",
          "transferAsset(address,uint256)",
          "transferTo(address,uint256)",
          "swap(uint256,uint256,uint256,uint256)",
          "kLast()",
          "approval(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/AgentFactoryV3.sol:AgentFactoryV3": {
        "src": "contracts/virtualPersona/AgentFactoryV3.sol:23",
        "version": {
          "withMetadata": "1d43d8aaa4c42f34e1c8d270317fe4dc5883fd2a365bd2ddee57a2eb208dd7a1",
          "withoutMetadata": "3e39aec5d1af7b28f9db62727f0d8925a4dfbd16d0866ab4999a87159973d590",
          "linkedWithoutMetadata": "3e39aec5d1af7b28f9db62727f0d8925a4dfbd16d0866ab4999a87159973d590"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/virtualPersona/IAgentFactoryV3.sol:IAgentFactoryV3"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@openzeppelin/contracts/proxy/Clones.sol:Clones"
        ],
        "methods": [
          "()",
          "initialize(address,address,uint256,uint256,address,address,string)",
          "getApplication(uint256)",
          "proposeAgent(string,string,string,uint8[],bytes32,address,uint32,uint256)",
          "withdraw(uint256)",
          "executeApplication(uint256,bool)",
          "totalAgents()",
          "setApplicationThreshold(uint256)",
          "setImplementations(address)",
          "setMaturityDuration(uint256)",
          "setTokenAdmin(address)",
          "setTokenSupplyParams(uint256,uint256,uint256,uint256,uint256,uint256,address)",
          "setTokenTaxParams(uint256,uint256,uint256,address)",
          "setAssetToken(address)",
          "pause()",
          "unpause()",
          "initFromBondingCurve(string,string,uint8[],bytes32,address,uint32,uint256,uint256)",
          "executeBondingCurveApplication(uint256,uint256,uint256,address)",
          "setDefaultDelegatee(address)",
          "getKuruRouterAddress()",
          "setKuruRouterAddress(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:31"
            },
            {
              "label": "tokenImplementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:32"
            },
            {
              "label": "applicationThreshold",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:37"
            },
            {
              "label": "allTokens",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:39"
            },
            {
              "label": "allDAOs",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:40"
            },
            {
              "label": "assetToken",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:42"
            },
            {
              "label": "maturityDuration",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:43"
            },
            {
              "label": "_applications",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_struct(Application)8389_storage)",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:80"
            },
            {
              "label": "gov",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:82"
            },
            {
              "label": "locked",
              "offset": 20,
              "slot": "8",
              "type": "t_bool",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:95"
            },
            {
              "label": "allTradingTokens",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:107"
            },
            {
              "label": "_minter",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:111"
            },
            {
              "label": "_tokenAdmin",
              "offset": 0,
              "slot": "11",
              "type": "t_address",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:112"
            },
            {
              "label": "defaultDelegatee",
              "offset": 0,
              "slot": "12",
              "type": "t_address",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:113"
            },
            {
              "label": "_tokenSupplyParams",
              "offset": 0,
              "slot": "13",
              "type": "t_bytes_storage",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:116"
            },
            {
              "label": "_tokenTaxParams",
              "offset": 0,
              "slot": "14",
              "type": "t_bytes_storage",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:117"
            },
            {
              "label": "_tokenMultiplier",
              "offset": 0,
              "slot": "15",
              "type": "t_uint16",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:118"
            },
            {
              "label": "_balancerVault",
              "offset": 2,
              "slot": "15",
              "type": "t_address",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:125"
            },
            {
              "label": "_kuruRouterAddress",
              "offset": 0,
              "slot": "16",
              "type": "t_address",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:127"
            },
            {
              "label": "_baseTokenSymbol",
              "offset": 0,
              "slot": "17",
              "type": "t_string_storage",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:128"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)24_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(AccessControlStorage)34_storage": {
              "label": "struct AccessControlUpgradeable.AccessControlStorage",
              "members": [
                {
                  "label": "_roles",
                  "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)349_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)24_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint8)dyn_storage": {
              "label": "uint8[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_enum(ApplicationStatus)8360": {
              "label": "enum AgentFactoryV3.ApplicationStatus",
              "members": [
                "Active",
                "Executed",
                "Withdrawn"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint256,t_struct(Application)8389_storage)": {
              "label": "mapping(uint256 => struct AgentFactoryV3.Application)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Application)8389_storage": {
              "label": "struct AgentFactoryV3.Application",
              "members": [
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "tokenURI",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "status",
                  "type": "t_enum(ApplicationStatus)8360",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "withdrawableAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "cores",
                  "type": "t_array(t_uint8)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "proposalEndBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "virtualId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "tbaSalt",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "tbaImplementation",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "daoVotingPeriod",
                  "type": "t_uint32",
                  "offset": 20,
                  "slot": "10"
                },
                {
                  "label": "daoThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                }
              ],
              "numberOfBytes": "384"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/AgentToken.sol:AgentToken": {
        "src": "contracts/virtualPersona/AgentToken.sol:22",
        "version": {
          "withMetadata": "219fb1b6cf38d2aa6ba7438acce8b1962f65e99ef436d7fd1e472276df427107",
          "withoutMetadata": "f68baed55d11788599823ddcee49645488b7528d89dbbcc76a24d6eb3600c268",
          "linkedWithoutMetadata": "f68baed55d11788599823ddcee49645488b7528d89dbbcc76a24d6eb3600c268"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "contracts/virtualPersona/IAgentToken.sol:IAgentToken",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/virtualPersona/IErrors.sol:IErrors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "contracts/virtualPersona/IERC20Config.sol:IERC20Config",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize(address[3],bytes,bytes,bytes,address,string)",
          "addInitialLiquidity(address)",
          "isLiquidityPool(address)",
          "liquidityPools()",
          "addLiquidityPool(address)",
          "removeLiquidityPool(address)",
          "isValidCaller(bytes32)",
          "validCallers()",
          "addValidCaller(bytes32)",
          "removeValidCaller(bytes32)",
          "setProjectTaxRecipient(address)",
          "setSwapThresholdBasisPoints(uint16)",
          "setProjectTaxRates(uint16,uint16)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "totalBuyTaxBasisPoints()",
          "totalSellTaxBasisPoints()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "distributeTaxTokens()",
          "withdrawETH(uint256)",
          "withdrawERC20(address,uint256)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AgentToken",
            "src": "contracts/virtualPersona/AgentToken.sol:104"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "kuruCreatedMarketAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:40"
            },
            {
              "label": "kuruRouterAddress",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:42"
            },
            {
              "label": "botProtectionDurationInSeconds",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:44"
            },
            {
              "label": "_tokenHasTax",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:45"
            },
            {
              "label": "fundedDate",
              "offset": 1,
              "slot": "3",
              "type": "t_uint32",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:52"
            },
            {
              "label": "projectBuyTaxBasisPoints",
              "offset": 5,
              "slot": "3",
              "type": "t_uint16",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:53"
            },
            {
              "label": "projectSellTaxBasisPoints",
              "offset": 7,
              "slot": "3",
              "type": "t_uint16",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:54"
            },
            {
              "label": "swapThresholdBasisPoints",
              "offset": 9,
              "slot": "3",
              "type": "t_uint16",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:55"
            },
            {
              "label": "pairToken",
              "offset": 11,
              "slot": "3",
              "type": "t_address",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:56"
            },
            {
              "label": "_autoSwapInProgress",
              "offset": 31,
              "slot": "3",
              "type": "t_bool",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:62"
            },
            {
              "label": "projectTaxRecipient",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:64"
            },
            {
              "label": "projectTaxPendingSwap",
              "offset": 0,
              "slot": "5",
              "type": "t_uint128",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:65"
            },
            {
              "label": "vault",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:66"
            },
            {
              "label": "_balancerVault",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:68"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "8",
              "type": "t_string_storage",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:70"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "9",
              "type": "t_string_storage",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:71"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:72"
            },
            {
              "label": "_baseTokenSymbol",
              "offset": 0,
              "slot": "11",
              "type": "t_string_storage",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:74"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:77"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:80"
            },
            {
              "label": "_validCallerCodeHashes",
              "offset": 0,
              "slot": "14",
              "type": "t_struct(Bytes32Set)3404_storage",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:83"
            },
            {
              "label": "_liquidityPools",
              "offset": 0,
              "slot": "16",
              "type": "t_struct(AddressSet)3525_storage",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:86"
            },
            {
              "label": "_factory",
              "offset": 0,
              "slot": "18",
              "type": "t_contract(IAgentFactory)11285",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:88"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Ownable2StepStorage)151_storage": {
              "label": "struct Ownable2StepUpgradeable.Ownable2StepStorage",
              "members": [
                {
                  "label": "_pendingOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)206_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IAgentFactory)11285": {
              "label": "contract IAgentFactory",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)3525_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)3210_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Bytes32Set)3404_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)3210_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)3210_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_positions",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable2Step": [
              {
                "contract": "Ownable2StepUpgradeable",
                "label": "_pendingOwner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:29",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IAgentFactory.sol:IAgentFactory": {
        "src": "contracts/virtualPersona/IAgentFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposeAgent(string,string,string,uint8[],bytes32,address,uint32,uint256)",
          "withdraw(uint256)",
          "totalAgents()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IAgentFactoryV3.sol:IAgentFactoryV3": {
        "src": "contracts/virtualPersona/IAgentFactoryV3.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposeAgent(string,string,string,uint8[],bytes32,address,uint32,uint256)",
          "withdraw(uint256)",
          "totalAgents()",
          "initFromBondingCurve(string,string,uint8[],bytes32,address,uint32,uint256,uint256)",
          "executeBondingCurveApplication(uint256,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IAgentToken.sol:IAgentToken": {
        "src": "contracts/virtualPersona/IAgentToken.sol:9",
        "inherit": [
          "contracts/virtualPersona/IErrors.sol:IErrors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "contracts/virtualPersona/IERC20Config.sol:IERC20Config",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "addInitialLiquidity(address)",
          "isLiquidityPool(address)",
          "liquidityPools()",
          "addLiquidityPool(address)",
          "removeLiquidityPool(address)",
          "isValidCaller(bytes32)",
          "validCallers()",
          "addValidCaller(bytes32)",
          "removeValidCaller(bytes32)",
          "setProjectTaxRecipient(address)",
          "setSwapThresholdBasisPoints(uint16)",
          "setProjectTaxRates(uint16,uint16)",
          "totalBuyTaxBasisPoints()",
          "totalSellTaxBasisPoints()",
          "distributeTaxTokens()",
          "withdrawETH(uint256)",
          "withdrawERC20(address,uint256)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "initialize(address[3],bytes,bytes,bytes,address,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IERC20Config.sol:IERC20Config": {
        "src": "contracts/virtualPersona/IERC20Config.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IErrors.sol:IErrors": {
        "src": "contracts/virtualPersona/IErrors.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IKuru.sol:IDepositContract": {
        "src": "contracts/virtualPersona/IKuru.sol:44",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IKuru.sol:IKuruRouter": {
        "src": "contracts/virtualPersona/IKuru.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deployProxy(uint8,address,address,uint96,uint32,uint32,uint96,uint96,uint256,uint256,uint96)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IKuru.sol:IKuruVault": {
        "src": "contracts/virtualPersona/IKuru.sol:28",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVaultParams()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IKuru.sol:IOrderBook": {
        "src": "contracts/virtualPersona/IKuru.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)154_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/example/MyTokenV1.sol:MyTokenV1": {
        "src": "contracts/example/MyTokenV1.sol:11",
        "version": {
          "withMetadata": "76c6ba569e06002a82f63f00b449f24720d1bf858e3e09fab4d8012d27ba6fe9",
          "withoutMetadata": "770156e60a4ee913e09cc88e5e656c95f430bb74fd2006ce42f3db42347fa7a2",
          "linkedWithoutMetadata": "770156e60a4ee913e09cc88e5e656c95f430bb74fd2006ce42f3db42347fa7a2"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,uint256)",
          "setMyValue(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "myValue",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "MyTokenV1",
              "src": "contracts/example/MyTokenV1.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)154_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/example/MyTokenV2.sol:MyTokenV2": {
        "src": "contracts/example/MyTokenV2.sol:9",
        "version": {
          "withMetadata": "09c367f711d3ff341207f4f83ff90c6f62073edf77a5c3d0fa062f77dd93ba3f",
          "withoutMetadata": "664474c19c84376cc829923c0d4e50303c30913d5ac2b171eff5ad7b0d4ba4a3",
          "linkedWithoutMetadata": "664474c19c84376cc829923c0d4e50303c30913d5ac2b171eff5ad7b0d4ba4a3"
        },
        "inherit": [
          "contracts/example/MyTokenV1.sol:MyTokenV1",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "version()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "myValue",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "MyTokenV1",
              "src": "contracts/example/MyTokenV1.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)154_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)24_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(AccessControlStorage)34_storage": {
              "label": "struct AccessControlUpgradeable.AccessControlStorage",
              "members": [
                {
                  "label": "_roles",
                  "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)24_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "pendingOwner()",
          "transferOwnership(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Ownable2StepStorage)151_storage": {
              "label": "struct Ownable2StepUpgradeable.Ownable2StepStorage",
              "members": [
                {
                  "label": "_pendingOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)206_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable2Step": [
              {
                "contract": "Ownable2StepUpgradeable",
                "label": "_pendingOwner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:29",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)206_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)351_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor": {
        "src": "@openzeppelin/contracts/governance/IGovernor.sol:15",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "version()",
          "COUNTING_MODE()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalThreshold()",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "proposalProposer(uint256)",
          "proposalEta(uint256)",
          "proposalNeedsQueuing(uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "getVotesWithParams(address,uint256,bytes)",
          "hasVoted(uint256,address)",
          "propose(address[],uint256[],bytes[],string)",
          "queue(address[],uint256[],bytes[],bytes32)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "cancel(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteWithReasonAndParams(uint256,uint8,string,bytes)",
          "castVoteBySig(uint256,uint8,address,bytes)",
          "castVoteWithReasonAndParamsBySig(uint256,uint8,address,string,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin/contracts/interfaces/IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372": {
        "src": "@openzeppelin/contracts/interfaces/IERC6372.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "clock()",
          "CLOCK_MODE()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "4e1b40705e7eafb73a57bce36940364ea16e722dec4144fcf459a9ebea6e3d49",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:11",
        "version": {
          "withMetadata": "5f355666a6a48a3798ab8491921b605e73e0abab9051bbb43e86abbd84007744",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin/contracts/utils/Errors.sol:14",
        "version": {
          "withMetadata": "341feb50d5bc64ae6d632385b395839cd8cc716ce09f2dbc802ba800b851f6c0",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:41",
        "version": {
          "withMetadata": "841cb6be47fe5cbdf586eff9140266e9329d1d20c65b8382e4bf03fe14de7cc3",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IRateProvider.sol:IRateProvider": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IRateProvider.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRate()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:IAuthentication": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getActionId(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol:ISignaturesValidator": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol:20",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getDomainSeparator()",
          "getNextNonce(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol:ITemporarilyPausable": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol:20",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPausedState()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol:IWETH": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol:23",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol:IERC20": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol:IAsset": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol:IAuthorizer": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "canPerform(bytes32,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol:IBasePool": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol:26",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IPoolSwapStructs.sol:IPoolSwapStructs"
        ],
        "libraries": [],
        "methods": [
          "onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes)",
          "onExitPool(bytes32,address,address,uint256[],uint256,uint256,bytes)",
          "getPoolId()",
          "getSwapFeePercentage()",
          "getScalingFactors()",
          "queryJoin(bytes32,address,address,uint256[],uint256,uint256,bytes)",
          "queryExit(bytes32,address,address,uint256[],uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol:IFlashLoanRecipient": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [
          "receiveFlashLoan(contract IERC20[],uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IPoolSwapStructs.sol:IPoolSwapStructs": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IPoolSwapStructs.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol:IProtocolFeesCollector": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol:23",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawCollectedFees(contract IERC20[],uint256[],address)",
          "setSwapFeePercentage(uint256)",
          "setFlashLoanFeePercentage(uint256)",
          "getSwapFeePercentage()",
          "getFlashLoanFeePercentage()",
          "getCollectedFeeAmounts(contract IERC20[])",
          "getAuthorizer()",
          "vault()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IVault.sol:IVault": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IVault.sol:34",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:IAuthentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol:ITemporarilyPausable",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol:ISignaturesValidator"
        ],
        "libraries": [],
        "methods": [
          "getAuthorizer()",
          "setAuthorizer(address)",
          "hasApprovedRelayer(address,address)",
          "setRelayerApproval(address,address,bool)",
          "getInternalBalance(address,contract IERC20[])",
          "manageUserBalance(struct IVault.UserBalanceOp[])",
          "registerPool(uint8)",
          "getPool(bytes32)",
          "registerTokens(bytes32,contract IERC20[],address[])",
          "deregisterTokens(bytes32,contract IERC20[])",
          "getPoolTokenInfo(bytes32,address)",
          "getPoolTokens(bytes32)",
          "joinPool(bytes32,address,address,(contract IAsset[],uint256[],bytes,bool))",
          "exitPool(bytes32,address,address payable,(contract IAsset[],uint256[],bytes,bool))",
          "swap((bytes32,uint8,address,address,uint256,bytes),(address,bool,address payable,bool),uint256,uint256)",
          "batchSwap(uint8,struct IVault.BatchSwapStep[],contract IAsset[],(address,bool,address payable,bool),int256[],uint256)",
          "queryBatchSwap(uint8,struct IVault.BatchSwapStep[],contract IAsset[],(address,bool,address payable,bool))",
          "flashLoan(address,contract IERC20[],uint256[],bytes)",
          "managePoolBalance(struct IVault.PoolBalanceOp[])",
          "getProtocolFeesCollector()",
          "setPaused(bool)",
          "WETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/contracts/IWeightedPoolFactory.sol:IWeightedPoolFactory": {
        "src": "contracts/dexPool/balancer-v2/contracts/IWeightedPoolFactory.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "create(string,string,contract IERC20[],uint256[],contract IRateProvider[],uint256,address)",
          "getPoolVersion()",
          "version()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/fun/Bonding.sol:Bonding": {
        "src": "contracts/fun/Bonding.sol:18",
        "version": {
          "withMetadata": "d745a1912c57f7c34f37b6d417849f9d89de04e74d9234ce1d1472efaec818c9",
          "withoutMetadata": "45d0bdeccc279fcbc831f6d0d210b824616352d4f4b92ebab09496be21520979",
          "linkedWithoutMetadata": "45d0bdeccc279fcbc831f6d0d210b824616352d4f4b92ebab09496be21520979"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize(address,address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "setInitialSupply(uint256)",
          "setGradThreshold(uint256)",
          "setFee(uint256,address)",
          "setMaxTx(uint256)",
          "setAssetRate(uint256)",
          "setDeployParams((bytes32,address,uint32,uint256))",
          "getUserTokens(address)",
          "launch(string,string,uint8[],string,string,string[4],uint256)",
          "sell(uint256,address)",
          "buy(uint256,address)",
          "unwrapToken(address,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_feeTo",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:25"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(FFactory)6798",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:27"
            },
            {
              "label": "router",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FRouter)7877",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:28"
            },
            {
              "label": "initialSupply",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:29"
            },
            {
              "label": "fee",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:30"
            },
            {
              "label": "assetRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:32"
            },
            {
              "label": "gradThreshold",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:33"
            },
            {
              "label": "maxTx",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:35"
            },
            {
              "label": "agentFactory",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:35"
            },
            {
              "label": "_deployParams",
              "offset": 0,
              "slot": "9",
              "type": "t_struct(DeployParams)4559_storage",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:80"
            },
            {
              "label": "profile",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_struct(Profile)4494_storage)",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:82"
            },
            {
              "label": "profiles",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:85"
            },
            {
              "label": "tokenInfo",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_struct(Token)4525_storage)",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:85"
            },
            {
              "label": "tokenInfos",
              "offset": 0,
              "slot": "15",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:88"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)206_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)351_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint8)dyn_storage": {
              "label": "uint8[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FFactory)6798": {
              "label": "contract FFactory",
              "numberOfBytes": "20"
            },
            "t_contract(FRouter)7877": {
              "label": "contract FRouter",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(Profile)4494_storage)": {
              "label": "mapping(address => struct Bonding.Profile)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Token)4525_storage)": {
              "label": "mapping(address => struct Bonding.Token)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)4550_storage": {
              "label": "struct Bonding.Data",
              "members": [
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "ticker",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "supply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "price",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "marketCap",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "volume",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "volume24H",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "prevPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "lastUpdated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                }
              ],
              "numberOfBytes": "384"
            },
            "t_struct(DeployParams)4559_storage": {
              "label": "struct Bonding.DeployParams",
              "members": [
                {
                  "label": "tbaSalt",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tbaImplementation",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "daoVotingPeriod",
                  "type": "t_uint32",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "daoThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Profile)4494_storage": {
              "label": "struct Bonding.Profile",
              "members": [
                {
                  "label": "user",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokens",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Token)4525_storage": {
              "label": "struct Bonding.Token",
              "members": [
                {
                  "label": "creator",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pair",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "agentToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "data",
                  "type": "t_struct(Data)4550_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "description",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "cores",
                  "type": "t_array(t_uint8)dyn_storage",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "image",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "twitter",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "telegram",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "youtube",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "website",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "22"
                },
                {
                  "label": "trading",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "23"
                },
                {
                  "label": "tradingOnUniswap",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "23"
                }
              ],
              "numberOfBytes": "768"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/fun/FERC20.sol:FERC20": {
        "src": "contracts/fun/FERC20.sol:7",
        "version": {
          "withMetadata": "b97429cb080ce48cc352cbaded18378287b31c9db43db04a22db02f68de3b018",
          "withoutMetadata": "3fde2a5f4920f297195f9a7fc12f8380241496eecfd4634a19e31564d2bc7d7a",
          "linkedWithoutMetadata": "3fde2a5f4920f297195f9a7fc12f8380241496eecfd4634a19e31564d2bc7d7a"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,uint256)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "updateMaxTx(uint256)",
          "excludeFromMaxTx(address)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FERC20",
            "src": "contracts/fun/FERC20.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:10"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:12"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:14"
            },
            {
              "label": "maxTx",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:16"
            },
            {
              "label": "_maxTxAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:18"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:20"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:22"
            },
            {
              "label": "isExcludedFromMaxTx",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/fun/FFactory.sol:FFactory": {
        "src": "contracts/fun/FFactory.sol:10",
        "version": {
          "withMetadata": "582b8ef84a91564811dc1117c370ad0e8dcc466f39fee8dcdafbb9a83416e8f0",
          "withoutMetadata": "baf8a5e919202a8b40252a587310d8b3c9e8445f94442a2d1883e1b68307f1c6",
          "linkedWithoutMetadata": "baf8a5e919202a8b40252a587310d8b3c9e8445f94442a2d1883e1b68307f1c6"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address,uint256,uint256)",
          "createPair(address,address)",
          "getPair(address,address)",
          "allPairsLength()",
          "setTaxParams(address,uint256,uint256)",
          "setRouter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_pair",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "contract": "FFactory",
              "src": "contracts/fun/FFactory.sol:18"
            },
            {
              "label": "pairs",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "FFactory",
              "src": "contracts/fun/FFactory.sol:20"
            },
            {
              "label": "router",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "FFactory",
              "src": "contracts/fun/FFactory.sol:22"
            },
            {
              "label": "taxVault",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "FFactory",
              "src": "contracts/fun/FFactory.sol:25"
            },
            {
              "label": "buyTax",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "FFactory",
              "src": "contracts/fun/FFactory.sol:26"
            },
            {
              "label": "sellTax",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "FFactory",
              "src": "contracts/fun/FFactory.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)24_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(AccessControlStorage)34_storage": {
              "label": "struct AccessControlUpgradeable.AccessControlStorage",
              "members": [
                {
                  "label": "_roles",
                  "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)351_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)24_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/fun/FPair.sol:FPair": {
        "src": "contracts/fun/FPair.sol:10",
        "version": {
          "withMetadata": "3ad5f6ccc53939645fcb7d462c4f446f27c910b2e6496359bf308adde9138e24",
          "withoutMetadata": "bfca534cea53fff70b9782a302b7f573f52bf042c30f423c5a428a71195829de",
          "linkedWithoutMetadata": "bfca534cea53fff70b9782a302b7f573f52bf042c30f423c5a428a71195829de"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/fun/IFPair.sol:IFPair"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "mint(uint256,uint256)",
          "swap(uint256,uint256,uint256,uint256)",
          "approval(address,address,uint256)",
          "transferAsset(address,uint256)",
          "transferTo(address,uint256)",
          "getReserves()",
          "kLast()",
          "priceALast()",
          "priceBLast()",
          "balance()",
          "assetBalance()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FPair",
            "src": "contracts/fun/FPair.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            },
            {
              "label": "router",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "FPair",
              "src": "contracts/fun/FPair.sol:13"
            },
            {
              "label": "tokenA",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "FPair",
              "src": "contracts/fun/FPair.sol:14"
            },
            {
              "label": "tokenB",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "FPair",
              "src": "contracts/fun/FPair.sol:15"
            },
            {
              "label": "_pool",
              "offset": 0,
              "slot": "4",
              "type": "t_struct(Pool)6827_storage",
              "contract": "FPair",
              "src": "contracts/fun/FPair.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_struct(Pool)6827_storage": {
              "label": "struct FPair.Pool",
              "members": [
                {
                  "label": "reserve0",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "reserve1",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "k",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lastUpdated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/fun/FRouter.sol:FRouter": {
        "src": "contracts/fun/FRouter.sol:15",
        "version": {
          "withMetadata": "23d9d9e2955fae5ce9eabe79acf0b665078a0d7cea58b0482ac40cce6b8b91aa",
          "withoutMetadata": "34287aed886c841bb5c04f2691056280be369bb0f9249402fe8472ca9f5beb4c",
          "linkedWithoutMetadata": "34287aed886c841bb5c04f2691056280be369bb0f9249402fe8472ca9f5beb4c"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "getAmountsOut(address,address,uint256)",
          "addInitialLiquidity(address,uint256,uint256)",
          "sell(uint256,address,address)",
          "buy(uint256,address,address)",
          "graduate(address)",
          "approval(address,address,address,uint256)",
          "setTaxManager(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(FFactory)6798",
              "contract": "FRouter",
              "src": "contracts/fun/FRouter.sol:25"
            },
            {
              "label": "assetToken",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "FRouter",
              "src": "contracts/fun/FRouter.sol:26"
            },
            {
              "label": "taxManager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "FRouter",
              "src": "contracts/fun/FRouter.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)24_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(AccessControlStorage)34_storage": {
              "label": "struct AccessControlUpgradeable.AccessControlStorage",
              "members": [
                {
                  "label": "_roles",
                  "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)351_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)24_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_contract(FFactory)6798": {
              "label": "contract FFactory",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/fun/IFPair.sol:IFPair": {
        "src": "contracts/fun/IFPair.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getReserves()",
          "assetBalance()",
          "balance()",
          "mint(uint256,uint256)",
          "transferAsset(address,uint256)",
          "transferTo(address,uint256)",
          "swap(uint256,uint256,uint256,uint256)",
          "kLast()",
          "approval(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/AgentToken.sol:AgentToken": {
        "src": "contracts/virtualPersona/AgentToken.sol:21",
        "version": {
          "withMetadata": "9eeb2ab310e510e368b6e571d7ac33852bea6b6f42a21d0977c174175fe134a6",
          "withoutMetadata": "f78cedfbc4a27a2dd5f07c8b7c662466bae651df2bf932600e5e9898c5acff8d",
          "linkedWithoutMetadata": "f78cedfbc4a27a2dd5f07c8b7c662466bae651df2bf932600e5e9898c5acff8d"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "contracts/virtualPersona/IAgentToken.sol:IAgentToken",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/virtualPersona/IErrors.sol:IErrors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "contracts/virtualPersona/IERC20Config.sol:IERC20Config",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize(address[3],bytes,bytes,bytes,address)",
          "addInitialLiquidity(address)",
          "isLiquidityPool(address)",
          "liquidityPools()",
          "addLiquidityPool(address)",
          "removeLiquidityPool(address)",
          "isValidCaller(bytes32)",
          "validCallers()",
          "addValidCaller(bytes32)",
          "removeValidCaller(bytes32)",
          "setProjectTaxRecipient(address)",
          "setSwapThresholdBasisPoints(uint16)",
          "setProjectTaxRates(uint16,uint16)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "totalBuyTaxBasisPoints()",
          "totalSellTaxBasisPoints()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "distributeTaxTokens()",
          "withdrawETH(uint256)",
          "withdrawERC20(address,uint256)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AgentToken",
            "src": "contracts/virtualPersona/AgentToken.sol:99"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "balancerPool",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:38"
            },
            {
              "label": "poolFactoryAddress",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:39"
            },
            {
              "label": "botProtectionDurationInSeconds",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:41"
            },
            {
              "label": "_tokenHasTax",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:42"
            },
            {
              "label": "fundedDate",
              "offset": 1,
              "slot": "3",
              "type": "t_uint32",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:49"
            },
            {
              "label": "projectBuyTaxBasisPoints",
              "offset": 5,
              "slot": "3",
              "type": "t_uint16",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:50"
            },
            {
              "label": "projectSellTaxBasisPoints",
              "offset": 7,
              "slot": "3",
              "type": "t_uint16",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:51"
            },
            {
              "label": "swapThresholdBasisPoints",
              "offset": 9,
              "slot": "3",
              "type": "t_uint16",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:52"
            },
            {
              "label": "pairToken",
              "offset": 11,
              "slot": "3",
              "type": "t_address",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:53"
            },
            {
              "label": "_autoSwapInProgress",
              "offset": 31,
              "slot": "3",
              "type": "t_bool",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:59"
            },
            {
              "label": "projectTaxRecipient",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:61"
            },
            {
              "label": "projectTaxPendingSwap",
              "offset": 0,
              "slot": "5",
              "type": "t_uint128",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:62"
            },
            {
              "label": "vault",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:63"
            },
            {
              "label": "_balancerVault",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:65"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "8",
              "type": "t_string_storage",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:67"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "9",
              "type": "t_string_storage",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:68"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:69"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:72"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:75"
            },
            {
              "label": "_validCallerCodeHashes",
              "offset": 0,
              "slot": "13",
              "type": "t_struct(Bytes32Set)3065_storage",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:78"
            },
            {
              "label": "_liquidityPools",
              "offset": 0,
              "slot": "15",
              "type": "t_struct(AddressSet)3186_storage",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:81"
            },
            {
              "label": "_factory",
              "offset": 0,
              "slot": "17",
              "type": "t_contract(IAgentFactory)10021",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:83"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Ownable2StepStorage)151_storage": {
              "label": "struct Ownable2StepUpgradeable.Ownable2StepStorage",
              "members": [
                {
                  "label": "_pendingOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)206_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IAgentFactory)10021": {
              "label": "contract IAgentFactory",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)3186_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2871_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Bytes32Set)3065_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2871_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)2871_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_positions",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable2Step": [
              {
                "contract": "Ownable2StepUpgradeable",
                "label": "_pendingOwner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:29",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IAgentFactory.sol:IAgentFactory": {
        "src": "contracts/virtualPersona/IAgentFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposeAgent(string,string,string,uint8[],bytes32,address,uint32,uint256)",
          "withdraw(uint256)",
          "totalAgents()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IAgentFactoryV3.sol:IAgentFactoryV3": {
        "src": "contracts/virtualPersona/IAgentFactoryV3.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposeAgent(string,string,string,uint8[],bytes32,address,uint32,uint256)",
          "withdraw(uint256)",
          "totalAgents()",
          "initFromBondingCurve(string,string,uint8[],bytes32,address,uint32,uint256,uint256)",
          "executeBondingCurveApplication(uint256,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IAgentToken.sol:IAgentToken": {
        "src": "contracts/virtualPersona/IAgentToken.sol:9",
        "inherit": [
          "contracts/virtualPersona/IErrors.sol:IErrors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "contracts/virtualPersona/IERC20Config.sol:IERC20Config",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "addInitialLiquidity(address)",
          "isLiquidityPool(address)",
          "liquidityPools()",
          "addLiquidityPool(address)",
          "removeLiquidityPool(address)",
          "isValidCaller(bytes32)",
          "validCallers()",
          "addValidCaller(bytes32)",
          "removeValidCaller(bytes32)",
          "setProjectTaxRecipient(address)",
          "setSwapThresholdBasisPoints(uint16)",
          "setProjectTaxRates(uint16,uint16)",
          "totalBuyTaxBasisPoints()",
          "totalSellTaxBasisPoints()",
          "distributeTaxTokens()",
          "withdrawETH(uint256)",
          "withdrawERC20(address,uint256)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "initialize(address[3],bytes,bytes,bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IERC20Config.sol:IERC20Config": {
        "src": "contracts/virtualPersona/IERC20Config.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IErrors.sol:IErrors": {
        "src": "contracts/virtualPersona/IErrors.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)24_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(AccessControlStorage)34_storage": {
              "label": "struct AccessControlUpgradeable.AccessControlStorage",
              "members": [
                {
                  "label": "_roles",
                  "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)24_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "pendingOwner()",
          "transferOwnership(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Ownable2StepStorage)151_storage": {
              "label": "struct Ownable2StepUpgradeable.Ownable2StepStorage",
              "members": [
                {
                  "label": "_pendingOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)206_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable2Step": [
              {
                "contract": "Ownable2StepUpgradeable",
                "label": "_pendingOwner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:29",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)206_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)347_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)542_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)606_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor": {
        "src": "@openzeppelin/contracts/governance/IGovernor.sol:15",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "version()",
          "COUNTING_MODE()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalThreshold()",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "proposalProposer(uint256)",
          "proposalEta(uint256)",
          "proposalNeedsQueuing(uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "getVotesWithParams(address,uint256,bytes)",
          "hasVoted(uint256,address)",
          "propose(address[],uint256[],bytes[],string)",
          "queue(address[],uint256[],bytes[],bytes32)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "cancel(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteWithReasonAndParams(uint256,uint8,string,bytes)",
          "castVoteBySig(uint256,uint8,address,bytes)",
          "castVoteWithReasonAndParamsBySig(uint256,uint8,address,string,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin/contracts/interfaces/IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372": {
        "src": "@openzeppelin/contracts/interfaces/IERC6372.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "clock()",
          "CLOCK_MODE()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/Clones.sol:Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:19",
        "version": {
          "withMetadata": "4ffa2e2321bbd3aa498c130019bbcfd7b497ec1c9cc8dc9a3e1c7cc22849df48",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "e8a02562540ef0d411eab457ef9d3bfbc6a21da01bac148a48315e4b64dcb864",
          "withoutMetadata": "b9264ff9341fba27da83b09b1e4777b66443c145365098faefcbde91b21c8c3c",
          "linkedWithoutMetadata": "b9264ff9341fba27da83b09b1e4777b66443c145365098faefcbde91b21c8c3c"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:26"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:15",
        "version": {
          "withMetadata": "cd547be80eee37f7cbca379104bd92b985c8adab1442d8f5b29970cc5f16dc84",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "6b8756d404f68326a63b61e6af7dd3d30884a13ab6ceffafa510d8252c4cb13c",
          "withoutMetadata": "ae7f2e2823d9340ec24db9dd684ab335f32e92e1760f61b6935baff332eff4f6",
          "linkedWithoutMetadata": "ae7f2e2823d9340ec24db9dd684ab335f32e92e1760f61b6935baff332eff4f6"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProxyAdmin",
            "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:17",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:62",
        "version": {
          "withMetadata": "d728ee4e68b2f9e6856801c3af581da848ccb99bd2f17a8680b6407dc5f94bb6",
          "withoutMetadata": "d728ee4e68b2f9e6856801c3af581da848ccb99bd2f17a8680b6407dc5f94bb6",
          "linkedWithoutMetadata": "d728ee4e68b2f9e6856801c3af581da848ccb99bd2f17a8680b6407dc5f94bb6"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:79"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_admin",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:67"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:29",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "4e1b40705e7eafb73a57bce36940364ea16e722dec4144fcf459a9ebea6e3d49",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:11",
        "version": {
          "withMetadata": "5f355666a6a48a3798ab8491921b605e73e0abab9051bbb43e86abbd84007744",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin/contracts/utils/Errors.sol:14",
        "version": {
          "withMetadata": "341feb50d5bc64ae6d632385b395839cd8cc716ce09f2dbc802ba800b851f6c0",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "1c1cd1344b06c7c54c3ed0a25f51be0aa8f9ac17ab0384a02973af6c3a7c47ff",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:41",
        "version": {
          "withMetadata": "841cb6be47fe5cbdf586eff9140266e9329d1d20c65b8382e4bf03fe14de7cc3",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol:IAuthorizerAdaptor": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol:20",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:IAuthentication"
        ],
        "libraries": [],
        "methods": [
          "getVault()",
          "getAuthorizer()",
          "performAction(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/BasePoolUserData.sol:BasePoolUserData": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/BasePoolUserData.sol:17",
        "version": {
          "withMetadata": "e1d2edddd90d32e5e8c675c8c1d703d833925d7cb5e1732470d597d769dd5371",
          "withoutMetadata": "6a76e268db0309dc7b0357403ed8a0fa0ba7e96e832cb7fbd4f708d9529a1cfc",
          "linkedWithoutMetadata": "6a76e268db0309dc7b0357403ed8a0fa0ba7e96e832cb7fbd4f708d9529a1cfc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IAssetManager.sol:IAssetManager": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IAssetManager.sol:20",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setConfig(bytes32,bytes)",
          "getToken()",
          "getAUM(bytes32)",
          "getPoolBalances(bytes32)",
          "maxInvestableBalance(bytes32)",
          "updateBalanceOfPool(bytes32)",
          "shouldRebalance(uint256,uint256)",
          "rebalance(bytes32,bool)",
          "capitalOut(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IBasePoolFactory.sol:IBasePoolFactory": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IBasePoolFactory.sol:20",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:IAuthentication"
        ],
        "libraries": [],
        "methods": [
          "isPoolFromFactory(address)",
          "isDisabled()",
          "disable()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IControlledPool.sol:IControlledPool": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IControlledPool.sol:19",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setSwapFeePercentage(uint256)",
          "setAssetManagerPoolConfig(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IRateProvider.sol:IRateProvider": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IRateProvider.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRate()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IRecoveryMode.sol:IRecoveryMode": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IRecoveryMode.sol:20",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enableRecoveryMode()",
          "disableRecoveryMode()",
          "inRecoveryMode()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-weighted/WeightedPoolUserData.sol:WeightedPoolUserData": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-weighted/WeightedPoolUserData.sol:19",
        "version": {
          "withMetadata": "5e9ebcbfe6a44df9a6192515b9b71400a5ea0ccfd7627ab36bcfc9a85eebcd7b",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:115",
        "version": {
          "withMetadata": "9d301ad3865fea6e0514b538cb79b24599ac3ab2b51c0665f80e50a8cb11eec5",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:IAuthentication": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getActionId(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol:ISignaturesValidator": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol:20",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getDomainSeparator()",
          "getNextNonce(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol:ITemporarilyPausable": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol:20",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPausedState()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol:IWETH": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol:23",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol:IERC20": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol:IERC20Permit": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol:IProtocolFeePercentagesProvider": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol:23",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerFeeType(uint256,string,uint256,uint256)",
          "isValidFeeType(uint256)",
          "isValidFeeTypePercentage(uint256,uint256)",
          "setFeeTypePercentage(uint256,uint256)",
          "getFeeTypePercentage(uint256)",
          "getFeeTypeMaximumPercentage(uint256)",
          "getFeeTypeName(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol:ProtocolFeeType": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol:105",
        "version": {
          "withMetadata": "a2339df5eafe6feeaca65bbba3cf62e911440d6dcdcf16fe95345cd2a84dd7e8",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol:IAsset": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol:IAuthorizer": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "canPerform(bytes32,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol:IBasePool": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol:26",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IPoolSwapStructs.sol:IPoolSwapStructs"
        ],
        "libraries": [],
        "methods": [
          "onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes)",
          "onExitPool(bytes32,address,address,uint256[],uint256,uint256,bytes)",
          "getPoolId()",
          "getSwapFeePercentage()",
          "getScalingFactors()",
          "queryJoin(bytes32,address,address,uint256[],uint256,uint256,bytes)",
          "queryExit(bytes32,address,address,uint256[],uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol:IFlashLoanRecipient": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [
          "receiveFlashLoan(contract IERC20[],uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IMinimalSwapInfoPool.sol:IMinimalSwapInfoPool": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IMinimalSwapInfoPool.sol:31",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol:IBasePool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IPoolSwapStructs.sol:IPoolSwapStructs"
        ],
        "libraries": [],
        "methods": [
          "onSwap((uint8,address,address,uint256,bytes32,uint256,address,address,bytes),uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IPoolSwapStructs.sol:IPoolSwapStructs": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IPoolSwapStructs.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol:IProtocolFeesCollector": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol:23",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawCollectedFees(contract IERC20[],uint256[],address)",
          "setSwapFeePercentage(uint256)",
          "setFlashLoanFeePercentage(uint256)",
          "getSwapFeePercentage()",
          "getFlashLoanFeePercentage()",
          "getCollectedFeeAmounts(contract IERC20[])",
          "getAuthorizer()",
          "vault()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IVault.sol:IVault": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IVault.sol:34",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:IAuthentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol:ITemporarilyPausable",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol:ISignaturesValidator"
        ],
        "libraries": [],
        "methods": [
          "getAuthorizer()",
          "setAuthorizer(address)",
          "hasApprovedRelayer(address,address)",
          "setRelayerApproval(address,address,bool)",
          "getInternalBalance(address,contract IERC20[])",
          "manageUserBalance(struct IVault.UserBalanceOp[])",
          "registerPool(uint8)",
          "getPool(bytes32)",
          "registerTokens(bytes32,contract IERC20[],address[])",
          "deregisterTokens(bytes32,contract IERC20[])",
          "getPoolTokenInfo(bytes32,address)",
          "getPoolTokens(bytes32)",
          "joinPool(bytes32,address,address,(contract IAsset[],uint256[],bytes,bool))",
          "exitPool(bytes32,address,address payable,(contract IAsset[],uint256[],bytes,bool))",
          "swap((bytes32,uint8,address,address,uint256,bytes),(address,bool,address payable,bool),uint256,uint256)",
          "batchSwap(uint8,struct IVault.BatchSwapStep[],contract IAsset[],(address,bool,address payable,bool),int256[],uint256)",
          "queryBatchSwap(uint8,struct IVault.BatchSwapStep[],contract IAsset[],(address,bool,address payable,bool))",
          "flashLoan(address,contract IERC20[],uint256[],bytes)",
          "managePoolBalance(struct IVault.PoolBalanceOp[])",
          "getProtocolFeesCollector()",
          "setPaused(bool)",
          "WETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BalancerPoolToken.sol:BalancerPoolToken": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BalancerPoolToken.sol:35",
        "version": {
          "withMetadata": "56b79cada6ca2c12ef426bd7cf421a9a1196fc8e93ea82f37fc96ec8597e47db",
          "withoutMetadata": "1ec1f9c18ebed37cb804166e0aba27543f501e718db7328f627659a09ba7d04b",
          "linkedWithoutMetadata": "1ec1f9c18ebed37cb804166e0aba27543f501e718db7328f627659a09ba7d04b"
        },
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20Permit.sol:ERC20Permit",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol:EOASignaturesValidator",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol:EIP712",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol:ISignaturesValidator",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol:IERC20Permit",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:ERC20",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol:IERC20"
        ],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors"
        ],
        "methods": [
          "(string,string,address)",
          "getVault()",
          "allowance(address,address)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BalancerPoolToken",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BalancerPoolToken.sol:38"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_vault",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BalancerPoolToken.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:44"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:45"
            },
            {
              "label": "_nextNonce",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "EOASignaturesValidator",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BaseMinimalSwapInfoPool.sol:BaseMinimalSwapInfoPool": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BaseMinimalSwapInfoPool.sol:29",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePool.sol:BasePool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/RecoveryMode.sol:RecoveryMode",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol:TemporarilyPausable",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol:ITemporarilyPausable",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BalancerPoolToken.sol:BalancerPoolToken",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePoolAuthorization.sol:BasePoolAuthorization",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol:Authentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:IAuthentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IRecoveryMode.sol:IRecoveryMode",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20Permit.sol:ERC20Permit",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol:EOASignaturesValidator",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol:EIP712",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol:ISignaturesValidator",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol:IERC20Permit",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:ERC20",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol:IERC20",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IControlledPool.sol:IControlledPool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IMinimalSwapInfoPool.sol:IMinimalSwapInfoPool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol:IBasePool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IPoolSwapStructs.sol:IPoolSwapStructs"
        ],
        "libraries": [],
        "methods": [
          "onSwap((uint8,address,address,uint256,bytes32,uint256,address,address,bytes),uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:44"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:45"
            },
            {
              "label": "_nextNonce",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "EOASignaturesValidator",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol:27"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "7",
              "type": "t_bool",
              "contract": "TemporarilyPausable",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol:46"
            },
            {
              "label": "_miscData",
              "offset": 0,
              "slot": "8",
              "type": "t_bytes32",
              "contract": "BasePool",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePool.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePool.sol:BasePool": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePool.sol:55",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/RecoveryMode.sol:RecoveryMode",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol:TemporarilyPausable",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol:ITemporarilyPausable",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BalancerPoolToken.sol:BalancerPoolToken",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePoolAuthorization.sol:BasePoolAuthorization",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol:Authentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:IAuthentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IRecoveryMode.sol:IRecoveryMode",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20Permit.sol:ERC20Permit",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol:EOASignaturesValidator",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol:EIP712",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol:ISignaturesValidator",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol:IERC20Permit",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:ERC20",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol:IERC20",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IControlledPool.sol:IControlledPool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol:IBasePool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IPoolSwapStructs.sol:IPoolSwapStructs"
        ],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol:WordCodec",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol:FixedPoint",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/BasePoolUserData.sol:BasePoolUserData",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol:InputHelpers",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/math/Math.sol:Math"
        ],
        "methods": [
          "getPoolId()",
          "getSwapFeePercentage()",
          "getProtocolFeesCollector()",
          "setSwapFeePercentage(uint256)",
          "inRecoveryMode()",
          "setAssetManagerPoolConfig(address,bytes)",
          "pause()",
          "unpause()",
          "onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes)",
          "onExitPool(bytes32,address,address,uint256[],uint256,uint256,bytes)",
          "queryJoin(bytes32,address,address,uint256[],uint256,uint256,bytes)",
          "queryExit(bytes32,address,address,uint256[],uint256,uint256,bytes)",
          "getScalingFactors()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BasePool",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePool.sol:102"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_poolId",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePool.sol:95"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_protocolFeesCollector",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePool.sol:98"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:44"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:45"
            },
            {
              "label": "_nextNonce",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "EOASignaturesValidator",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol:27"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "7",
              "type": "t_bool",
              "contract": "TemporarilyPausable",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol:46"
            },
            {
              "label": "_miscData",
              "offset": 0,
              "slot": "8",
              "type": "t_bytes32",
              "contract": "BasePool",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePool.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePoolAuthorization.sol:BasePoolAuthorization": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePoolAuthorization.sol:31",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol:Authentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:IAuthentication"
        ],
        "libraries": [],
        "methods": [
          "getOwner()",
          "getAuthorizer()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BasePoolAuthorization",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePoolAuthorization.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_owner",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePoolAuthorization.sol:32"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/RecoveryMode.sol:RecoveryMode": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/RecoveryMode.sol:46",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePoolAuthorization.sol:BasePoolAuthorization",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol:Authentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:IAuthentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IRecoveryMode.sol:IRecoveryMode"
        ],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol:FixedPoint",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/BasePoolUserData.sol:BasePoolUserData",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors"
        ],
        "methods": [
          "enableRecoveryMode()",
          "disableRecoveryMode()",
          "inRecoveryMode()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol:BasePoolFactory": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol:38",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol:SingletonAuthentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol:Authentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/BaseSplitCodeFactory.sol:BaseSplitCodeFactory",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IBasePoolFactory.sol:IBasePoolFactory",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:IAuthentication"
        ],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors"
        ],
        "methods": [
          "isPoolFromFactory(address)",
          "isDisabled()",
          "disable()",
          "getProtocolFeePercentagesProvider()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BasePoolFactory",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol:51"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_protocolFeeProvider",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_isPoolFromFactory",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BasePoolFactory",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol:45"
            },
            {
              "label": "_disabled",
              "offset": 0,
              "slot": "1",
              "type": "t_bool",
              "contract": "BasePoolFactory",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/factories/FactoryWidePauseWindow.sol:FactoryWidePauseWindow": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/factories/FactoryWidePauseWindow.sol:24",
        "version": {
          "withMetadata": "33f6dffab1f82b8fd9e3b9a91801c54364497826933b9d2534e3bbaa8c9cb7ed",
          "withoutMetadata": "6e131429b1bcf310961b45ce4a62a8081fc7c12b6ffd808c20acee50e01e99cc",
          "linkedWithoutMetadata": "6e131429b1bcf310961b45ce4a62a8081fc7c12b6ffd808c20acee50e01e99cc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "getPauseConfiguration()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FactoryWidePauseWindow",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/factories/FactoryWidePauseWindow.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_poolsPauseWindowEndTime",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/factories/FactoryWidePauseWindow.sol:33"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/protocol-fees/InvariantGrowthProtocolSwapFees.sol:InvariantGrowthProtocolSwapFees": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/protocol-fees/InvariantGrowthProtocolSwapFees.sol:21",
        "version": {
          "withMetadata": "73ea492d733d93cebfb5d4cac52ba6c97a8f476eb4a1c1ba19c776170221716e",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol:FixedPoint",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/protocol-fees/ProtocolFees.sol:ProtocolFees"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/protocol-fees/ProtocolFeeCache.sol:ProtocolFeeCache": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/protocol-fees/ProtocolFeeCache.sol:39",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/RecoveryMode.sol:RecoveryMode",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePoolAuthorization.sol:BasePoolAuthorization",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol:Authentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:IAuthentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IRecoveryMode.sol:IRecoveryMode"
        ],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeCast.sol:SafeCast",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol:ProtocolFeeType",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors"
        ],
        "methods": [
          "getProtocolFeePercentageCache(uint256)",
          "updateProtocolFeePercentageCache()",
          "getProtocolSwapFeeDelegation()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProtocolFeeCache",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/protocol-fees/ProtocolFeeCache.sol:69"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_protocolFeeProvider",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/protocol-fees/ProtocolFeeCache.sol:42"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_delegatedProtocolSwapFees",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/protocol-fees/ProtocolFeeCache.sol:64"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_fixedProtocolSwapFeePercentage",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/protocol-fees/ProtocolFeeCache.sol:67"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_cache",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(FeeTypeCache)10246_storage",
              "contract": "ProtocolFeeCache",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/protocol-fees/ProtocolFeeCache.sol:52"
            }
          ],
          "types": {
            "t_struct(FeeTypeCache)10246_storage": {
              "label": "struct ProtocolFeeCache.FeeTypeCache",
              "members": [
                {
                  "label": "swapFee",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "yieldFee",
                  "type": "t_uint64",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "aumFee",
                  "type": "t_uint64",
                  "offset": 16,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/protocol-fees/ProtocolFees.sol:ProtocolFees": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/protocol-fees/ProtocolFees.sol:20",
        "version": {
          "withMetadata": "a07bc7c1893fcf9f22299821cc388f2c412c09c54ecb538f8552003c86bc9104",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol:FixedPoint",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/math/Math.sol:Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol:Authentication": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol:28",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:IAuthentication"
        ],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors"
        ],
        "methods": [
          "getActionId(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Authentication",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol:41"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_actionIdDisambiguator",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol:29"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/BaseSplitCodeFactory.sol:BaseSplitCodeFactory": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/BaseSplitCodeFactory.sol:26",
        "inherit": [],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/CodeDeployer.sol:CodeDeployer"
        ],
        "methods": [
          "getCreationCodeContracts()",
          "getCreationCode()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseSplitCodeFactory",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/BaseSplitCodeFactory.sol:43"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_creationCodeContractA",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/BaseSplitCodeFactory.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_creationCodeSizeA",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/BaseSplitCodeFactory.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_creationCodeContractB",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/BaseSplitCodeFactory.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_creationCodeSizeB",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/BaseSplitCodeFactory.sol:38"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/CodeDeployer.sol:CodeDeployer": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/CodeDeployer.sol:23",
        "version": {
          "withMetadata": "36f75c39c1955cf424c1d8f0640c500273cb8c72e8952a8cc64c060b6b49ac32",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol:EOASignaturesValidator": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol:25",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol:EIP712",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol:ISignaturesValidator"
        ],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors"
        ],
        "methods": [
          "getDomainSeparator()",
          "getNextNonce(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_nextNonce",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "EOASignaturesValidator",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol:InputHelpers": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol:20",
        "version": {
          "withMetadata": "56f839d6fa17368e4fd79c9fda03c591c1fcffc539ec694f223f0589d70acf9c",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol:SingletonAuthentication": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol:22",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol:Authentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:IAuthentication"
        ],
        "libraries": [],
        "methods": [
          "getVault()",
          "getAuthorizer()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SingletonAuthentication",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_vault",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol:23"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol:TemporarilyPausable": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol:36",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol:ITemporarilyPausable"
        ],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors"
        ],
        "methods": [
          "getPausedState()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TemporarilyPausable",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol:48"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_pauseWindowEndTime",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol:43"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_bufferPeriodEndTime",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "TemporarilyPausable",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol:46"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol:WordCodec": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol:36",
        "version": {
          "withMetadata": "3bed0168bc1d300f6eda6cbfef0526659c2ede178f33e6d5fa085abd8c5ca2bb",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/math/Math.sol:Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol:FixedPoint": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol:23",
        "version": {
          "withMetadata": "bc6cf682212fa926c4a6b8eabf3e5f5b652bd8a2f7762346eab0ff2ad0e7225d",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/math/LogExpMath.sol:LogExpMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/math/LogExpMath.sol:LogExpMath": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/math/LogExpMath.sol:31",
        "version": {
          "withMetadata": "b179dd6d32811b4958ed2e0a779051452d861cf281aad9a3c70eb6cd790bbafb",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/math/Math.sol:Math": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/math/Math.sol:11",
        "version": {
          "withMetadata": "2e0d122ff574ebad1434b2cfcfbfa55b82abbded0e0ee0c20dce823b95a9f192",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol:EIP712": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol:44"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol:27"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol:28"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:ERC20": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:34",
        "version": {
          "withMetadata": "c886f7a18fa766385fb8abf690ce2f8ed9eb303b81f4d02c50c53c7e2c64a9de",
          "withoutMetadata": "8ce4b01f8507c8b8d0a96a0b5404a6529c8c30e70d5b4ccef65795dbe9e5976c",
          "linkedWithoutMetadata": "8ce4b01f8507c8b8d0a96a0b5404a6529c8c30e70d5b4ccef65795dbe9e5976c"
        },
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol:IERC20"
        ],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeMath.sol:SafeMath",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:44"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20Permit.sol:ERC20Permit": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20Permit.sol:20",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol:EOASignaturesValidator",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol:EIP712",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol:ISignaturesValidator",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol:IERC20Permit",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:ERC20",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol:IERC20"
        ],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20Permit.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:44"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:45"
            },
            {
              "label": "_nextNonce",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "EOASignaturesValidator",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeCast.sol:SafeCast": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeCast.sol:22",
        "version": {
          "withMetadata": "deae2b885957533f3f0b83582105237f651d14c161956dbb1d1b13302305da04",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeMath.sol:SafeMath": {
        "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeMath.sol:20",
        "version": {
          "withMetadata": "4fe5809334cf5785b7cc5e35025eb08e633b3af9d4a1b0c554a25956ead1446a",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/contracts/BaseWeightedPool.sol:BaseWeightedPool": {
        "src": "contracts/dexPool/balancer-v2/contracts/BaseWeightedPool.sol:32",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BaseMinimalSwapInfoPool.sol:BaseMinimalSwapInfoPool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePool.sol:BasePool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/RecoveryMode.sol:RecoveryMode",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol:TemporarilyPausable",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol:ITemporarilyPausable",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BalancerPoolToken.sol:BalancerPoolToken",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePoolAuthorization.sol:BasePoolAuthorization",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol:Authentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:IAuthentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IRecoveryMode.sol:IRecoveryMode",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20Permit.sol:ERC20Permit",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol:EOASignaturesValidator",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol:EIP712",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol:ISignaturesValidator",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol:IERC20Permit",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:ERC20",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol:IERC20",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IControlledPool.sol:IControlledPool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IMinimalSwapInfoPool.sol:IMinimalSwapInfoPool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol:IBasePool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IPoolSwapStructs.sol:IPoolSwapStructs"
        ],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol:FixedPoint",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-weighted/WeightedPoolUserData.sol:WeightedPoolUserData",
          "contracts/dexPool/balancer-v2/contracts/WeightedMath.sol:WeightedMath",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol:InputHelpers",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/math/Math.sol:Math"
        ],
        "methods": [
          "getInvariant()",
          "getNormalizedWeights()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseWeightedPool",
            "src": "contracts/dexPool/balancer-v2/contracts/BaseWeightedPool.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:44"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:45"
            },
            {
              "label": "_nextNonce",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "EOASignaturesValidator",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol:27"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "7",
              "type": "t_bool",
              "contract": "TemporarilyPausable",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol:46"
            },
            {
              "label": "_miscData",
              "offset": 0,
              "slot": "8",
              "type": "t_bytes32",
              "contract": "BasePool",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePool.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/contracts/IWeightedPoolFactory.sol:IWeightedPoolFactory": {
        "src": "contracts/dexPool/balancer-v2/contracts/IWeightedPoolFactory.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "create(string,string,contract IERC20[],uint256[],contract IRateProvider[],uint256,address)",
          "getPoolVersion()",
          "version()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/contracts/ProtocolFeePercentagesProvider.sol:ProtocolFeePercentagesProvider": {
        "src": "contracts/dexPool/balancer-v2/contracts/ProtocolFeePercentagesProvider.sol:24",
        "version": {
          "withMetadata": "91e98e39d413520e761fa408cfc850e2f6cd2a5cf06b65d9ed39f4bdc84edd6e",
          "withoutMetadata": "91e98e39d413520e761fa408cfc850e2f6cd2a5cf06b65d9ed39f4bdc84edd6e",
          "linkedWithoutMetadata": "91e98e39d413520e761fa408cfc850e2f6cd2a5cf06b65d9ed39f4bdc84edd6e"
        },
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol:SingletonAuthentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol:Authentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:IAuthentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol:IProtocolFeePercentagesProvider"
        ],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeCast.sol:SafeCast",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol:ProtocolFeeType"
        ],
        "methods": [
          "(address,uint256,uint256)",
          "registerFeeType(uint256,string,uint256,uint256)",
          "isValidFeeType(uint256)",
          "isValidFeeTypePercentage(uint256,uint256)",
          "setFeeTypePercentage(uint256,uint256)",
          "getFeeTypePercentage(uint256)",
          "getFeeTypeMaximumPercentage(uint256)",
          "getFeeTypeName(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProtocolFeePercentagesProvider",
            "src": "contracts/dexPool/balancer-v2/contracts/ProtocolFeePercentagesProvider.sol:50"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_protocolFeesCollector",
            "src": "contracts/dexPool/balancer-v2/contracts/ProtocolFeePercentagesProvider.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_feeTypeData",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_struct(FeeTypeData)15928_storage)",
              "contract": "ProtocolFeePercentagesProvider",
              "src": "contracts/dexPool/balancer-v2/contracts/ProtocolFeePercentagesProvider.sol:39"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint256,t_struct(FeeTypeData)15928_storage)": {
              "label": "mapping(uint256 => struct ProtocolFeePercentagesProvider.FeeTypeData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(FeeTypeData)15928_storage": {
              "label": "struct ProtocolFeePercentagesProvider.FeeTypeData",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "maximum",
                  "type": "t_uint64",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "registered",
                  "type": "t_bool",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/contracts/WeightedMath.sol:WeightedMath": {
        "src": "contracts/dexPool/balancer-v2/contracts/WeightedMath.sol:25",
        "version": {
          "withMetadata": "a2375db0f065e793da63bd7ee0c5b6248051bba2d061a18983b21fc93dc8bd12",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol:FixedPoint",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:WeightedPool": {
        "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:24",
        "version": {
          "withMetadata": "f51c47c91c20615ba227ebda3291debbf8f5e1b3990b1dda338e9522f8689f71",
          "withoutMetadata": "f51c47c91c20615ba227ebda3291debbf8f5e1b3990b1dda338e9522f8689f71",
          "linkedWithoutMetadata": "f51c47c91c20615ba227ebda3291debbf8f5e1b3990b1dda338e9522f8689f71"
        },
        "inherit": [
          "contracts/dexPool/balancer-v2/contracts/WeightedPoolProtocolFees.sol:WeightedPoolProtocolFees",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/protocol-fees/ProtocolFeeCache.sol:ProtocolFeeCache",
          "contracts/dexPool/balancer-v2/contracts/BaseWeightedPool.sol:BaseWeightedPool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BaseMinimalSwapInfoPool.sol:BaseMinimalSwapInfoPool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePool.sol:BasePool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/RecoveryMode.sol:RecoveryMode",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol:TemporarilyPausable",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol:ITemporarilyPausable",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BalancerPoolToken.sol:BalancerPoolToken",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePoolAuthorization.sol:BasePoolAuthorization",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol:Authentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:IAuthentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IRecoveryMode.sol:IRecoveryMode",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20Permit.sol:ERC20Permit",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol:EOASignaturesValidator",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol:EIP712",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol:ISignaturesValidator",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol:IERC20Permit",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:ERC20",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol:IERC20",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IControlledPool.sol:IControlledPool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IMinimalSwapInfoPool.sol:IMinimalSwapInfoPool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol:IBasePool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IPoolSwapStructs.sol:IPoolSwapStructs"
        ],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol:FixedPoint",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol:InputHelpers",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors",
          "contracts/dexPool/balancer-v2/contracts/WeightedMath.sol:WeightedMath"
        ],
        "methods": [
          "((string,string,contract IERC20[],uint256[],contract IRateProvider[],address[],uint256),address,address,uint256,uint256,address,string)",
          "version()",
          "getActualSupply()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WeightedPool",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:73"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_totalTokens",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:29"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_token0",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_token1",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_token2",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_token3",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_token4",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_token5",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_token6",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:38"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_token7",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:39"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_scalingFactor0",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:45"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_scalingFactor1",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:46"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_scalingFactor2",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:47"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_scalingFactor3",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:48"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_scalingFactor4",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:49"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_scalingFactor5",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:50"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_scalingFactor6",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:51"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_scalingFactor7",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:52"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_normalizedWeight0",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:54"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_normalizedWeight1",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:55"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_normalizedWeight2",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:56"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_normalizedWeight3",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:57"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_normalizedWeight4",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:58"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_normalizedWeight5",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:59"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_normalizedWeight6",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:60"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_normalizedWeight7",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:61"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:44"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:45"
            },
            {
              "label": "_nextNonce",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "EOASignaturesValidator",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol:27"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "7",
              "type": "t_bool",
              "contract": "TemporarilyPausable",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol:46"
            },
            {
              "label": "_miscData",
              "offset": 0,
              "slot": "8",
              "type": "t_bytes32",
              "contract": "BasePool",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePool.sol:87"
            },
            {
              "label": "_cache",
              "offset": 0,
              "slot": "9",
              "type": "t_struct(FeeTypeCache)10246_storage",
              "contract": "ProtocolFeeCache",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/protocol-fees/ProtocolFeeCache.sol:52"
            },
            {
              "label": "_athRateProduct",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "WeightedPoolProtocolFees",
              "src": "contracts/dexPool/balancer-v2/contracts/WeightedPoolProtocolFees.sol:46"
            },
            {
              "label": "_version",
              "offset": 0,
              "slot": "11",
              "type": "t_string_storage",
              "contract": "WeightedPool",
              "src": "contracts/dexPool/balancer-v2/contracts/WeightedPool.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(FeeTypeCache)10246_storage": {
              "label": "struct ProtocolFeeCache.FeeTypeCache",
              "members": [
                {
                  "label": "swapFee",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "yieldFee",
                  "type": "t_uint64",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "aumFee",
                  "type": "t_uint64",
                  "offset": 16,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/contracts/WeightedPoolFactory.sol:WeightedPoolFactory": {
        "src": "contracts/dexPool/balancer-v2/contracts/WeightedPoolFactory.sol:25",
        "version": {
          "withMetadata": "e7f179ba1524b51a5882e59d0fc91c3230e36b78318d9f57f10673d3968caab5",
          "withoutMetadata": "e7f179ba1524b51a5882e59d0fc91c3230e36b78318d9f57f10673d3968caab5",
          "linkedWithoutMetadata": "e7f179ba1524b51a5882e59d0fc91c3230e36b78318d9f57f10673d3968caab5"
        },
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/factories/FactoryWidePauseWindow.sol:FactoryWidePauseWindow",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol:BasePoolFactory",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol:SingletonAuthentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol:Authentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/BaseSplitCodeFactory.sol:BaseSplitCodeFactory",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IBasePoolFactory.sol:IBasePoolFactory",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:IAuthentication"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string,string)",
          "version()",
          "getPoolVersion()",
          "create(string,string,contract IERC20[],uint256[],contract IRateProvider[],uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WeightedPoolFactory",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPoolFactory.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_isPoolFromFactory",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BasePoolFactory",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol:45"
            },
            {
              "label": "_disabled",
              "offset": 0,
              "slot": "1",
              "type": "t_bool",
              "contract": "BasePoolFactory",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol:46"
            },
            {
              "label": "_factoryVersion",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "WeightedPoolFactory",
              "src": "contracts/dexPool/balancer-v2/contracts/WeightedPoolFactory.sol:26"
            },
            {
              "label": "_poolVersion",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "WeightedPoolFactory",
              "src": "contracts/dexPool/balancer-v2/contracts/WeightedPoolFactory.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dexPool/balancer-v2/contracts/WeightedPoolProtocolFees.sol:WeightedPoolProtocolFees": {
        "src": "contracts/dexPool/balancer-v2/contracts/WeightedPoolProtocolFees.sol:24",
        "inherit": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/protocol-fees/ProtocolFeeCache.sol:ProtocolFeeCache",
          "contracts/dexPool/balancer-v2/contracts/BaseWeightedPool.sol:BaseWeightedPool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BaseMinimalSwapInfoPool.sol:BaseMinimalSwapInfoPool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePool.sol:BasePool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/RecoveryMode.sol:RecoveryMode",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol:TemporarilyPausable",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol:ITemporarilyPausable",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BalancerPoolToken.sol:BalancerPoolToken",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePoolAuthorization.sol:BasePoolAuthorization",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol:Authentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol:IAuthentication",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IRecoveryMode.sol:IRecoveryMode",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20Permit.sol:ERC20Permit",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol:EOASignaturesValidator",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol:EIP712",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol:ISignaturesValidator",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol:IERC20Permit",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:ERC20",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol:IERC20",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/pool-utils/IControlledPool.sol:IControlledPool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IMinimalSwapInfoPool.sol:IMinimalSwapInfoPool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol:IBasePool",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/vault/IPoolSwapStructs.sol:IPoolSwapStructs"
        ],
        "libraries": [
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol:FixedPoint",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol:WordCodec",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol:Errors",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol:InputHelpers",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/protocol-fees/InvariantGrowthProtocolSwapFees.sol:InvariantGrowthProtocolSwapFees",
          "contracts/dexPool/balancer-v2/contracts/WeightedMath.sol:WeightedMath",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol:ProtocolFeeType",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/protocol-fees/ProtocolFees.sol:ProtocolFees",
          "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeMath.sol:SafeMath"
        ],
        "methods": [
          "getLastPostJoinExitInvariant()",
          "getATHRateProduct()",
          "getRateProviders()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WeightedPoolProtocolFees",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPoolProtocolFees.sol:59"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_rateProvider0",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPoolProtocolFees.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_rateProvider1",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPoolProtocolFees.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_rateProvider2",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPoolProtocolFees.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_rateProvider3",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPoolProtocolFees.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_rateProvider4",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPoolProtocolFees.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_rateProvider5",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPoolProtocolFees.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_rateProvider6",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPoolProtocolFees.sol:38"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_rateProvider7",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPoolProtocolFees.sol:39"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_exemptFromYieldFees",
            "src": "contracts/dexPool/balancer-v2/contracts/WeightedPoolProtocolFees.sol:41"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:44"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol:45"
            },
            {
              "label": "_nextNonce",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "EOASignaturesValidator",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol:27"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "7",
              "type": "t_bool",
              "contract": "TemporarilyPausable",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol:46"
            },
            {
              "label": "_miscData",
              "offset": 0,
              "slot": "8",
              "type": "t_bytes32",
              "contract": "BasePool",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/BasePool.sol:87"
            },
            {
              "label": "_cache",
              "offset": 0,
              "slot": "9",
              "type": "t_struct(FeeTypeCache)10246_storage",
              "contract": "ProtocolFeeCache",
              "src": "contracts/dexPool/balancer-v2/@balancer-labs/v2-pool-utils/contracts/protocol-fees/ProtocolFeeCache.sol:52"
            },
            {
              "label": "_athRateProduct",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "WeightedPoolProtocolFees",
              "src": "contracts/dexPool/balancer-v2/contracts/WeightedPoolProtocolFees.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(FeeTypeCache)10246_storage": {
              "label": "struct ProtocolFeeCache.FeeTypeCache",
              "members": [
                {
                  "label": "swapFee",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "yieldFee",
                  "type": "t_uint64",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "aumFee",
                  "type": "t_uint64",
                  "offset": 16,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/example/MockErc20.sol:MockErc20": {
        "src": "contracts/example/MockErc20.sol:6",
        "version": {
          "withMetadata": "e161f1940d1ace55349dad21ecea6f30dcf96a74931a403698fff72b6caa9af7",
          "withoutMetadata": "6a927171a4652c86faf18897043ef5576768c3d059d5354ceeb11fd11627ed07",
          "linkedWithoutMetadata": "6a927171a4652c86faf18897043ef5576768c3d059d5354ceeb11fd11627ed07"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockErc20",
            "src": "contracts/example/MockErc20.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/example/MyTokenV1.sol:MyTokenV1": {
        "src": "contracts/example/MyTokenV1.sol:11",
        "version": {
          "withMetadata": "0af9968edf040b61b77aef68ef953f5b235d94578d00d78b884861d0a15efed6",
          "withoutMetadata": "6d70b1a4569b3961ed8631de18edc11df914abf1ce7c7dd01ad2b3e14a0fb173",
          "linkedWithoutMetadata": "6d70b1a4569b3961ed8631de18edc11df914abf1ce7c7dd01ad2b3e14a0fb173"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,uint256)",
          "setMyValue(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "myValue",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "MyTokenV1",
              "src": "contracts/example/MyTokenV1.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)347_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)206_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/example/MyTokenV2.sol:MyTokenV2": {
        "src": "contracts/example/MyTokenV2.sol:9",
        "version": {
          "withMetadata": "92548c8d06e14e0f23b4453fb3f398312b74a52b71adeeddbb9f0f03b7e46eef",
          "withoutMetadata": "a7936a5188f1da4428f6a58fe916cb2c92d133732b08ff5c396a48b6f36dab31",
          "linkedWithoutMetadata": "a7936a5188f1da4428f6a58fe916cb2c92d133732b08ff5c396a48b6f36dab31"
        },
        "inherit": [
          "contracts/example/MyTokenV1.sol:MyTokenV1",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "version()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "myValue",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "MyTokenV1",
              "src": "contracts/example/MyTokenV1.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)347_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)206_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/fun/Bonding.sol:Bonding": {
        "src": "contracts/fun/Bonding.sol:18",
        "version": {
          "withMetadata": "0079f38b56c3a9e7d17aad8448da86edebe11114f051267d5eec57728e123a1b",
          "withoutMetadata": "51cdadd1c9c54a63f55f4731b07ea8f4daa7522b07de5c6f1f639e0c49927023",
          "linkedWithoutMetadata": "51cdadd1c9c54a63f55f4731b07ea8f4daa7522b07de5c6f1f639e0c49927023"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize(address,address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "setInitialSupply(uint256)",
          "setGradThreshold(uint256)",
          "setFee(uint256,address)",
          "setMaxTx(uint256)",
          "setAssetRate(uint256)",
          "setDeployParams((bytes32,address,uint32,uint256))",
          "getUserTokens(address)",
          "launch(string,string,uint8[],string,string,string[4],uint256)",
          "sell(uint256,address)",
          "buy(uint256,address)",
          "unwrapToken(address,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_feeTo",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:25"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(FFactory)22020",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:27"
            },
            {
              "label": "router",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(FRouter)23099",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:28"
            },
            {
              "label": "initialSupply",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:29"
            },
            {
              "label": "fee",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:30"
            },
            {
              "label": "assetRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:32"
            },
            {
              "label": "gradThreshold",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:33"
            },
            {
              "label": "maxTx",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:35"
            },
            {
              "label": "agentFactory",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:35"
            },
            {
              "label": "_deployParams",
              "offset": 0,
              "slot": "9",
              "type": "t_struct(DeployParams)19781_storage",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:80"
            },
            {
              "label": "profile",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_struct(Profile)19716_storage)",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:82"
            },
            {
              "label": "profiles",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:85"
            },
            {
              "label": "tokenInfo",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_struct(Token)19747_storage)",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:85"
            },
            {
              "label": "tokenInfos",
              "offset": 0,
              "slot": "15",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Bonding",
              "src": "contracts/fun/Bonding.sol:88"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)206_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)606_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint8)dyn_storage": {
              "label": "uint8[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(FFactory)22020": {
              "label": "contract FFactory",
              "numberOfBytes": "20"
            },
            "t_contract(FRouter)23099": {
              "label": "contract FRouter",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(Profile)19716_storage)": {
              "label": "mapping(address => struct Bonding.Profile)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Token)19747_storage)": {
              "label": "mapping(address => struct Bonding.Token)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Data)19772_storage": {
              "label": "struct Bonding.Data",
              "members": [
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "ticker",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "supply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "price",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "marketCap",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "volume",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "volume24H",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "prevPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "lastUpdated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                }
              ],
              "numberOfBytes": "384"
            },
            "t_struct(DeployParams)19781_storage": {
              "label": "struct Bonding.DeployParams",
              "members": [
                {
                  "label": "tbaSalt",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tbaImplementation",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "daoVotingPeriod",
                  "type": "t_uint32",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "daoThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Profile)19716_storage": {
              "label": "struct Bonding.Profile",
              "members": [
                {
                  "label": "user",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokens",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Token)19747_storage": {
              "label": "struct Bonding.Token",
              "members": [
                {
                  "label": "creator",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pair",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "agentToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "data",
                  "type": "t_struct(Data)19772_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "description",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "cores",
                  "type": "t_array(t_uint8)dyn_storage",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "image",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "twitter",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "telegram",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "youtube",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "website",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "22"
                },
                {
                  "label": "trading",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "23"
                },
                {
                  "label": "tradingOnUniswap",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "23"
                }
              ],
              "numberOfBytes": "768"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/fun/FERC20.sol:FERC20": {
        "src": "contracts/fun/FERC20.sol:7",
        "version": {
          "withMetadata": "3f84d2b7d450f49608f25e65901f05eeb4a5b9a969feb73a3501ff2d1ec9cfeb",
          "withoutMetadata": "e7baa7c73307c1f29a6df5ae28c7498c68a734d8317a3ea49af233b421b15099",
          "linkedWithoutMetadata": "e7baa7c73307c1f29a6df5ae28c7498c68a734d8317a3ea49af233b421b15099"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,uint256)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "updateMaxTx(uint256)",
          "excludeFromMaxTx(address)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FERC20",
            "src": "contracts/fun/FERC20.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:10"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:12"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:14"
            },
            {
              "label": "maxTx",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:16"
            },
            {
              "label": "_maxTxAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:18"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:20"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:22"
            },
            {
              "label": "isExcludedFromMaxTx",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FERC20",
              "src": "contracts/fun/FERC20.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/fun/FFactory.sol:FFactory": {
        "src": "contracts/fun/FFactory.sol:10",
        "version": {
          "withMetadata": "582b8ef84a91564811dc1117c370ad0e8dcc466f39fee8dcdafbb9a83416e8f0",
          "withoutMetadata": "baf8a5e919202a8b40252a587310d8b3c9e8445f94442a2d1883e1b68307f1c6",
          "linkedWithoutMetadata": "baf8a5e919202a8b40252a587310d8b3c9e8445f94442a2d1883e1b68307f1c6"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address,uint256,uint256)",
          "createPair(address,address)",
          "getPair(address,address)",
          "allPairsLength()",
          "setTaxParams(address,uint256,uint256)",
          "setRouter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_pair",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "contract": "FFactory",
              "src": "contracts/fun/FFactory.sol:18"
            },
            {
              "label": "pairs",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "FFactory",
              "src": "contracts/fun/FFactory.sol:20"
            },
            {
              "label": "router",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "FFactory",
              "src": "contracts/fun/FFactory.sol:22"
            },
            {
              "label": "taxVault",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "FFactory",
              "src": "contracts/fun/FFactory.sol:25"
            },
            {
              "label": "buyTax",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "FFactory",
              "src": "contracts/fun/FFactory.sol:26"
            },
            {
              "label": "sellTax",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "FFactory",
              "src": "contracts/fun/FFactory.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)24_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(AccessControlStorage)34_storage": {
              "label": "struct AccessControlUpgradeable.AccessControlStorage",
              "members": [
                {
                  "label": "_roles",
                  "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)606_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)24_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/fun/FPair.sol:FPair": {
        "src": "contracts/fun/FPair.sol:10",
        "version": {
          "withMetadata": "3ad5f6ccc53939645fcb7d462c4f446f27c910b2e6496359bf308adde9138e24",
          "withoutMetadata": "bfca534cea53fff70b9782a302b7f573f52bf042c30f423c5a428a71195829de",
          "linkedWithoutMetadata": "bfca534cea53fff70b9782a302b7f573f52bf042c30f423c5a428a71195829de"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/fun/IFPair.sol:IFPair"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "mint(uint256,uint256)",
          "swap(uint256,uint256,uint256,uint256)",
          "approval(address,address,uint256)",
          "transferAsset(address,uint256)",
          "transferTo(address,uint256)",
          "getReserves()",
          "kLast()",
          "priceALast()",
          "priceBLast()",
          "balance()",
          "assetBalance()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FPair",
            "src": "contracts/fun/FPair.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            },
            {
              "label": "router",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "FPair",
              "src": "contracts/fun/FPair.sol:13"
            },
            {
              "label": "tokenA",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "FPair",
              "src": "contracts/fun/FPair.sol:14"
            },
            {
              "label": "tokenB",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "FPair",
              "src": "contracts/fun/FPair.sol:15"
            },
            {
              "label": "_pool",
              "offset": 0,
              "slot": "4",
              "type": "t_struct(Pool)22049_storage",
              "contract": "FPair",
              "src": "contracts/fun/FPair.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_struct(Pool)22049_storage": {
              "label": "struct FPair.Pool",
              "members": [
                {
                  "label": "reserve0",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "reserve1",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "k",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lastUpdated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/fun/FRouter.sol:FRouter": {
        "src": "contracts/fun/FRouter.sol:15",
        "version": {
          "withMetadata": "23d9d9e2955fae5ce9eabe79acf0b665078a0d7cea58b0482ac40cce6b8b91aa",
          "withoutMetadata": "34287aed886c841bb5c04f2691056280be369bb0f9249402fe8472ca9f5beb4c",
          "linkedWithoutMetadata": "34287aed886c841bb5c04f2691056280be369bb0f9249402fe8472ca9f5beb4c"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "getAmountsOut(address,address,uint256)",
          "addInitialLiquidity(address,uint256,uint256)",
          "sell(uint256,address,address)",
          "buy(uint256,address,address)",
          "graduate(address)",
          "approval(address,address,address,uint256)",
          "setTaxManager(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(FFactory)22020",
              "contract": "FRouter",
              "src": "contracts/fun/FRouter.sol:25"
            },
            {
              "label": "assetToken",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "FRouter",
              "src": "contracts/fun/FRouter.sol:26"
            },
            {
              "label": "taxManager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "FRouter",
              "src": "contracts/fun/FRouter.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)24_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(AccessControlStorage)34_storage": {
              "label": "struct AccessControlUpgradeable.AccessControlStorage",
              "members": [
                {
                  "label": "_roles",
                  "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)606_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)24_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_contract(FFactory)22020": {
              "label": "contract FFactory",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/fun/IFPair.sol:IFPair": {
        "src": "contracts/fun/IFPair.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getReserves()",
          "assetBalance()",
          "balance()",
          "mint(uint256,uint256)",
          "transferAsset(address,uint256)",
          "transferTo(address,uint256)",
          "swap(uint256,uint256,uint256,uint256)",
          "kLast()",
          "approval(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/AgentFactoryV3.sol:AgentFactoryV3": {
        "src": "contracts/virtualPersona/AgentFactoryV3.sol:23",
        "version": {
          "withMetadata": "5d3464f754893aee20bd184dca555865201dfc739e4e5442f81a981b573ce302",
          "withoutMetadata": "0453e4843f16da43a43dac8d061cc46800850fe4a27d806c783aa795ad394c24",
          "linkedWithoutMetadata": "0453e4843f16da43a43dac8d061cc46800850fe4a27d806c783aa795ad394c24"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/virtualPersona/IAgentFactoryV3.sol:IAgentFactoryV3"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@openzeppelin/contracts/proxy/Clones.sol:Clones"
        ],
        "methods": [
          "()",
          "initialize(address,address,uint256,uint256,address,address)",
          "getApplication(uint256)",
          "proposeAgent(string,string,string,uint8[],bytes32,address,uint32,uint256)",
          "withdraw(uint256)",
          "executeApplication(uint256,bool)",
          "totalAgents()",
          "setApplicationThreshold(uint256)",
          "setImplementations(address)",
          "setMaturityDuration(uint256)",
          "setTokenAdmin(address)",
          "setTokenSupplyParams(uint256,uint256,uint256,uint256,uint256,uint256,address)",
          "setTokenTaxParams(uint256,uint256,uint256,address)",
          "setAssetToken(address)",
          "pause()",
          "unpause()",
          "initFromBondingCurve(string,string,uint8[],bytes32,address,uint32,uint256,uint256)",
          "executeBondingCurveApplication(uint256,uint256,uint256,address)",
          "setDefaultDelegatee(address)",
          "getPoolFactoryAddress()",
          "setPoolFactoryAddress(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:31"
            },
            {
              "label": "tokenImplementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:32"
            },
            {
              "label": "applicationThreshold",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:37"
            },
            {
              "label": "allTokens",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:39"
            },
            {
              "label": "allDAOs",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:40"
            },
            {
              "label": "assetToken",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:42"
            },
            {
              "label": "maturityDuration",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:43"
            },
            {
              "label": "_applications",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_struct(Application)23278_storage)",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:80"
            },
            {
              "label": "gov",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:82"
            },
            {
              "label": "locked",
              "offset": 20,
              "slot": "8",
              "type": "t_bool",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:95"
            },
            {
              "label": "allTradingTokens",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_address)dyn_storage",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:107"
            },
            {
              "label": "_minter",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:111"
            },
            {
              "label": "_tokenAdmin",
              "offset": 0,
              "slot": "11",
              "type": "t_address",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:112"
            },
            {
              "label": "defaultDelegatee",
              "offset": 0,
              "slot": "12",
              "type": "t_address",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:113"
            },
            {
              "label": "_tokenSupplyParams",
              "offset": 0,
              "slot": "13",
              "type": "t_bytes_storage",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:116"
            },
            {
              "label": "_tokenTaxParams",
              "offset": 0,
              "slot": "14",
              "type": "t_bytes_storage",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:117"
            },
            {
              "label": "_tokenMultiplier",
              "offset": 0,
              "slot": "15",
              "type": "t_uint16",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:118"
            },
            {
              "label": "_balancerVault",
              "offset": 2,
              "slot": "15",
              "type": "t_address",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:125"
            },
            {
              "label": "_poolFactoryAddress",
              "offset": 0,
              "slot": "16",
              "type": "t_address",
              "contract": "AgentFactoryV3",
              "src": "contracts/virtualPersona/AgentFactoryV3.sol:126"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)24_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(AccessControlStorage)34_storage": {
              "label": "struct AccessControlUpgradeable.AccessControlStorage",
              "members": [
                {
                  "label": "_roles",
                  "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)542_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)24_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint8)dyn_storage": {
              "label": "uint8[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_enum(ApplicationStatus)23249": {
              "label": "enum AgentFactoryV3.ApplicationStatus",
              "members": [
                "Active",
                "Executed",
                "Withdrawn"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint256,t_struct(Application)23278_storage)": {
              "label": "mapping(uint256 => struct AgentFactoryV3.Application)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Application)23278_storage": {
              "label": "struct AgentFactoryV3.Application",
              "members": [
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "tokenURI",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "status",
                  "type": "t_enum(ApplicationStatus)23249",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "withdrawableAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "cores",
                  "type": "t_array(t_uint8)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "proposalEndBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "virtualId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "tbaSalt",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "tbaImplementation",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "daoVotingPeriod",
                  "type": "t_uint32",
                  "offset": 20,
                  "slot": "10"
                },
                {
                  "label": "daoThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                }
              ],
              "numberOfBytes": "384"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)24_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/AgentToken.sol:AgentToken": {
        "src": "contracts/virtualPersona/AgentToken.sol:21",
        "version": {
          "withMetadata": "54b162ccae7d110ea64b685bef9b31b564425dea476396275f458d9f06169749",
          "withoutMetadata": "bbd7e05d58a14ac3458cc551b7863b80949b7d743dee18db834d5a84029a6a8c",
          "linkedWithoutMetadata": "bbd7e05d58a14ac3458cc551b7863b80949b7d743dee18db834d5a84029a6a8c"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "contracts/virtualPersona/IAgentToken.sol:IAgentToken",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/virtualPersona/IErrors.sol:IErrors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "contracts/virtualPersona/IERC20Config.sol:IERC20Config",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize(address[3],bytes,bytes,bytes,address)",
          "addInitialLiquidity(address)",
          "isLiquidityPool(address)",
          "liquidityPools()",
          "addLiquidityPool(address)",
          "removeLiquidityPool(address)",
          "isValidCaller(bytes32)",
          "validCallers()",
          "addValidCaller(bytes32)",
          "removeValidCaller(bytes32)",
          "setProjectTaxRecipient(address)",
          "setSwapThresholdBasisPoints(uint16)",
          "setProjectTaxRates(uint16,uint16)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "totalBuyTaxBasisPoints()",
          "totalSellTaxBasisPoints()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "distributeTaxTokens()",
          "withdrawETH(uint256)",
          "withdrawERC20(address,uint256)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AgentToken",
            "src": "contracts/virtualPersona/AgentToken.sol:99"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "balancerPool",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:38"
            },
            {
              "label": "poolFactoryAddress",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:39"
            },
            {
              "label": "botProtectionDurationInSeconds",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:41"
            },
            {
              "label": "_tokenHasTax",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:42"
            },
            {
              "label": "fundedDate",
              "offset": 1,
              "slot": "3",
              "type": "t_uint32",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:49"
            },
            {
              "label": "projectBuyTaxBasisPoints",
              "offset": 5,
              "slot": "3",
              "type": "t_uint16",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:50"
            },
            {
              "label": "projectSellTaxBasisPoints",
              "offset": 7,
              "slot": "3",
              "type": "t_uint16",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:51"
            },
            {
              "label": "swapThresholdBasisPoints",
              "offset": 9,
              "slot": "3",
              "type": "t_uint16",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:52"
            },
            {
              "label": "pairToken",
              "offset": 11,
              "slot": "3",
              "type": "t_address",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:53"
            },
            {
              "label": "_autoSwapInProgress",
              "offset": 31,
              "slot": "3",
              "type": "t_bool",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:59"
            },
            {
              "label": "projectTaxRecipient",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:61"
            },
            {
              "label": "projectTaxPendingSwap",
              "offset": 0,
              "slot": "5",
              "type": "t_uint128",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:62"
            },
            {
              "label": "vault",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:63"
            },
            {
              "label": "_balancerVault",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:65"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "8",
              "type": "t_string_storage",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:67"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "9",
              "type": "t_string_storage",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:68"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:69"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:72"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:75"
            },
            {
              "label": "_validCallerCodeHashes",
              "offset": 0,
              "slot": "13",
              "type": "t_struct(Bytes32Set)5380_storage",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:78"
            },
            {
              "label": "_liquidityPools",
              "offset": 0,
              "slot": "15",
              "type": "t_struct(AddressSet)5501_storage",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:81"
            },
            {
              "label": "_factory",
              "offset": 0,
              "slot": "17",
              "type": "t_contract(IAgentFactory)26272",
              "contract": "AgentToken",
              "src": "contracts/virtualPersona/AgentToken.sol:83"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)266_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Ownable2StepStorage)151_storage": {
              "label": "struct Ownable2StepUpgradeable.Ownable2StepStorage",
              "members": [
                {
                  "label": "_pendingOwner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)206_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IAgentFactory)26272": {
              "label": "contract IAgentFactory",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)5501_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)5186_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Bytes32Set)5380_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)5186_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)5186_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_positions",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable2Step": [
              {
                "contract": "Ownable2StepUpgradeable",
                "label": "_pendingOwner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:29",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IAgentFactory.sol:IAgentFactory": {
        "src": "contracts/virtualPersona/IAgentFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposeAgent(string,string,string,uint8[],bytes32,address,uint32,uint256)",
          "withdraw(uint256)",
          "totalAgents()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IAgentFactoryV3.sol:IAgentFactoryV3": {
        "src": "contracts/virtualPersona/IAgentFactoryV3.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposeAgent(string,string,string,uint8[],bytes32,address,uint32,uint256)",
          "withdraw(uint256)",
          "totalAgents()",
          "initFromBondingCurve(string,string,uint8[],bytes32,address,uint32,uint256,uint256)",
          "executeBondingCurveApplication(uint256,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IAgentToken.sol:IAgentToken": {
        "src": "contracts/virtualPersona/IAgentToken.sol:9",
        "inherit": [
          "contracts/virtualPersona/IErrors.sol:IErrors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "contracts/virtualPersona/IERC20Config.sol:IERC20Config",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "addInitialLiquidity(address)",
          "isLiquidityPool(address)",
          "liquidityPools()",
          "addLiquidityPool(address)",
          "removeLiquidityPool(address)",
          "isValidCaller(bytes32)",
          "validCallers()",
          "addValidCaller(bytes32)",
          "removeValidCaller(bytes32)",
          "setProjectTaxRecipient(address)",
          "setSwapThresholdBasisPoints(uint16)",
          "setProjectTaxRates(uint16,uint16)",
          "totalBuyTaxBasisPoints()",
          "totalSellTaxBasisPoints()",
          "distributeTaxTokens()",
          "withdrawETH(uint256)",
          "withdrawERC20(address,uint256)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "initialize(address[3],bytes,bytes,bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IERC20Config.sol:IERC20Config": {
        "src": "contracts/virtualPersona/IERC20Config.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/virtualPersona/IErrors.sol:IErrors": {
        "src": "contracts/virtualPersona/IErrors.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      }
    }
  ]
}